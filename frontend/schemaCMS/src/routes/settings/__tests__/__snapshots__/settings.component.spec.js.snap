// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Settings: Component should render correctly 1`] = `
<Fragment>
  <MobileMenu
    active="settingsNavBtn"
    headerSubtitle={
      <Memo(FormattedMessage)
        defaultMessage="My Profile"
        id="settings.subTitle"
      />
    }
    headerTitle={
      <Memo(FormattedMessage)
        defaultMessage="Schema CMS"
        id="settings.title"
      />
    }
    options={
      Array [
        Object {
          "allowedRoles": Array [
            "admin",
            "editor",
          ],
          "id": "projectsNavBtn",
          "label": <Memo(FormattedMessage)
            defaultMessage="Projects"
            id="settings.projectsListPage"
          />,
          "to": "/project/",
          "type": "link_item",
        },
        Object {
          "allowedRoles": Array [
            "admin",
          ],
          "id": "usersNavBtn",
          "label": <Memo(FormattedMessage)
            defaultMessage="Users"
            id="settings.usersPage"
          />,
          "to": "/user/",
          "type": "link_item",
        },
      ]
    }
  />
  <ContextHeader
    subtitle={
      <Memo(FormattedMessage)
        defaultMessage="My Profile"
        id="settings.subTitle"
      />
    }
    title={
      <Memo(FormattedMessage)
        defaultMessage="Schema CMS"
        id="settings.title"
      />
    }
  />
  <Formik
    displayName="user_profile_form"
    enableReinitialize={true}
    initialValues={
      Object {
        "authMethod": "email",
        "email": "email@example.com",
        "firstName": "FirstName",
        "id": "1",
        "lastName": "LastName",
        "role": "editor",
      }
    }
    onSubmit={[Function]}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "email",
          "lastName",
          "firstName",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "email": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
              "undefined": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
          "firstName": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "min": true,
              "trim": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
          "lastName": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "min": true,
              "required": true,
              "trim": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Component />
  </Formik>
</Fragment>
`;

exports[`Settings: Component should render correctly 2`] = `
<Fragment>
  <MobileMenu
    active="settingsNavBtn"
    headerSubtitle={
      <Memo(FormattedMessage)
        defaultMessage="My Profile"
        id="settings.subTitle"
      />
    }
    headerTitle={
      <Memo(FormattedMessage)
        defaultMessage="Schema CMS"
        id="settings.title"
      />
    }
    options={
      Array [
        Object {
          "allowedRoles": Array [
            "admin",
            "editor",
          ],
          "id": "projectsNavBtn",
          "label": <Memo(FormattedMessage)
            defaultMessage="Projects"
            id="settings.projectsListPage"
          />,
          "to": "/project/",
          "type": "link_item",
        },
        Object {
          "allowedRoles": Array [
            "admin",
          ],
          "id": "usersNavBtn",
          "label": <Memo(FormattedMessage)
            defaultMessage="Users"
            id="settings.usersPage"
          />,
          "to": "/user/",
          "type": "link_item",
        },
      ]
    }
  />
  <ContextHeader
    subtitle={
      <Memo(FormattedMessage)
        defaultMessage="My Profile"
        id="settings.subTitle"
      />
    }
    title={
      <Memo(FormattedMessage)
        defaultMessage="Schema CMS"
        id="settings.title"
      />
    }
  />
  <Formik
    displayName="user_profile_form"
    enableReinitialize={true}
    initialValues={
      Object {
        "authMethod": "email",
        "email": "email@example.com",
        "firstName": "FirstName",
        "id": "1",
        "lastName": "LastName",
        "role": "editor",
      }
    }
    onSubmit={[Function]}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "email",
          "lastName",
          "firstName",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "email": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
              "undefined": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
          "firstName": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "min": true,
              "trim": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
          "lastName": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "min": true,
              "required": true,
              "trim": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Component />
  </Formik>
</Fragment>
`;

exports[`Settings: Component should render correctly form 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "authMethod": "email",
        "email": "email@example.com",
        "firstName": "FirstName",
        "id": "1",
        "lastName": "LastName",
        "role": "editor",
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "authMethod": "email",
        "email": "email@example.com",
        "firstName": "FirstName",
        "id": "1",
        "lastName": "LastName",
        "role": "editor",
      },
    }
  }
>
  <styled.form
    onSubmit={[Function]}
  >
    <UserProfile
      errors={Object {}}
      getFieldHelpers={[Function]}
      getFieldMeta={[Function]}
      getFieldProps={[Function]}
      handleBlur={[Function]}
      handleChange={[Function]}
      handleReset={[Function]}
      initialErrors={Object {}}
      initialTouched={Object {}}
      initialValues={
        Object {
          "authMethod": "email",
          "email": "email@example.com",
          "firstName": "FirstName",
          "id": "1",
          "lastName": "LastName",
          "role": "editor",
        }
      }
      isCurrentUser={true}
      isValid={true}
      isValidating={false}
      registerField={[Function]}
      resetForm={[Function]}
      setErrors={[Function]}
      setFieldError={[Function]}
      setFieldTouched={[Function]}
      setFieldValue={[Function]}
      setFormikState={[Function]}
      setStatus={[Function]}
      setSubmitting={[Function]}
      setTouched={[Function]}
      setValues={[Function]}
      submitCount={0}
      submitForm={[Function]}
      touched={Object {}}
      unregisterField={[Function]}
      validateField={[Function]}
      validateForm={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
      validateOnMount={false}
      values={
        Object {
          "authMethod": "email",
          "email": "email@example.com",
          "firstName": "FirstName",
          "id": "1",
          "lastName": "LastName",
          "role": "editor",
        }
      }
    />
    <styled.div>
      <Styled(Span)
        id="resetPasswordLink"
        onClick={[Function]}
      >
        <MemoizedFormattedMessage
          defaultMessage="Reset password"
          id="settings.resetPassword"
        />
      </Styled(Span)>
    </styled.div>
    <NavigationContainer
      contentStyles={null}
      fixed={true}
      hideOnDesktop={false}
      right={false}
    >
      <BackButton
        disabled={false}
        id="settingsBackBtn"
        onClick={[Function]}
        type="button"
      />
      <NextButton
        disabled={true}
        id="settingsSaveBtn"
        loading={false}
        type="submit"
      >
        <MemoizedFormattedMessage
          defaultMessage="Save"
          id="settings.save"
        />
      </NextButton>
    </NavigationContainer>
  </styled.form>
</ContextProvider>
`;

exports[`Settings: Component should render form without reset password link 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "authMethod": "gmail",
        "email": "",
        "firstName": "",
        "lastName": "",
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "authMethod": "gmail",
        "email": "",
        "firstName": "",
        "lastName": "",
      },
    }
  }
>
  <styled.form
    onSubmit={[Function]}
  >
    <UserProfile
      errors={Object {}}
      getFieldHelpers={[Function]}
      getFieldMeta={[Function]}
      getFieldProps={[Function]}
      handleBlur={[Function]}
      handleChange={[Function]}
      handleReset={[Function]}
      initialErrors={Object {}}
      initialTouched={Object {}}
      initialValues={
        Object {
          "authMethod": "gmail",
          "email": "",
          "firstName": "",
          "lastName": "",
        }
      }
      isCurrentUser={true}
      isValid={true}
      isValidating={false}
      registerField={[Function]}
      resetForm={[Function]}
      setErrors={[Function]}
      setFieldError={[Function]}
      setFieldTouched={[Function]}
      setFieldValue={[Function]}
      setFormikState={[Function]}
      setStatus={[Function]}
      setSubmitting={[Function]}
      setTouched={[Function]}
      setValues={[Function]}
      submitCount={0}
      submitForm={[Function]}
      touched={Object {}}
      unregisterField={[Function]}
      validateField={[Function]}
      validateForm={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
      validateOnMount={false}
      values={
        Object {
          "authMethod": "gmail",
          "email": "",
          "firstName": "",
          "lastName": "",
        }
      }
    />
    <NavigationContainer
      contentStyles={null}
      fixed={true}
      hideOnDesktop={false}
      right={false}
    >
      <BackButton
        disabled={false}
        id="settingsBackBtn"
        onClick={[Function]}
        type="button"
      />
      <NextButton
        disabled={true}
        id="settingsSaveBtn"
        loading={false}
        type="submit"
      >
        <MemoizedFormattedMessage
          defaultMessage="Save"
          id="settings.save"
        />
      </NextButton>
    </NavigationContainer>
  </styled.form>
</ContextProvider>
`;
