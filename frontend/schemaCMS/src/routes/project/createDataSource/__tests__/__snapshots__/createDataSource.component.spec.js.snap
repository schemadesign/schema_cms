// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreateDataSource: Component should render correctly 1`] = `
<Fragment>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
    title="Create Data Source"
  />
  <TopHeader
    headerSubtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="project.createDataSource.subTitle"
        values={Object {}}
      />
    }
    headerTitle={
      <FormattedMessage
        defaultMessage="Data Sources"
        id="project.createDataSource.title"
        values={Object {}}
      />
    }
  />
  <ContextHeader
    subtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="project.createDataSource.subTitle"
        values={Object {}}
      />
    }
    title={
      <FormattedMessage
        defaultMessage="Data Sources"
        id="project.createDataSource.title"
        values={Object {}}
      />
    }
  />
  <Formik
    enableReinitialize={true}
    isInitialValid={false}
    onSubmit={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "file",
          "type",
          "name",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "file": SchemaType {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "fileName": false,
              "fileSize": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "mixed",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [],
          },
          "name": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "min": true,
              "required": true,
              "trim": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
          "type": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Component />
  </Formik>
</Fragment>
`;
