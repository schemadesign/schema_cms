// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Project/DataSource/View/DataWrangling/View Default 1`] = `
<div
  className="sc-Rmtcm iSVWGU"
>
  <div
    className="sc-htpNat KtFsv"
  >
    <div
      style={
        Object {
          "alignItems": "flex-start",
          "color": "#1d1d20",
          "display": "flex",
          "flexDirection": "row",
          "justifyContent": "space-between",
          "padding": "18px 0",
          "width": "100%",
        }
      }
    >
      <div>
        <div
          className="sc-bxivhb bUZGRr"
        >
          <h2
            id="projectsPageTitle"
            style={
              Object {
                "fontFamily": "Inter, \\"Helvetica Neue\\", Helvetica, Arial, sans-serif",
                "fontSize": "24px",
                "fontWeight": 100,
                "margin": 0,
              }
            }
          >
            Data Wrangling
          </h2>
          <h1
            id="projectsPageSubtitle"
            style={
              Object {
                "fontFamily": "Inter, \\"Helvetica Neue\\", Helvetica, Arial, sans-serif",
                "fontSize": "24px",
                "fontWeight": 600,
                "letterSpacing": "-0.12px",
                "lineHight": 1.25,
                "margin": 0,
              }
            }
          >
            View step
          </h1>
        </div>
      </div>
      <button
        onClick={[Function]}
        style={
          Object {
            "backgroundColor": "transparent",
            "border": "none",
            "borderRadius": "48px",
            "color": "#1d1d20",
            "cursor": "pointer",
            "display": "inline-block",
            "fontSize": "18px",
            "margin": "0",
            "minHeight": "48px",
            "outline": "none",
            "padding": "0",
            "position": "absolute",
            "right": 0,
            "top": 6,
          }
        }
      >
        <svg
          style={
            Object {
              "fill": "#1d1d20",
              "height": "60px",
              "width": "60px",
            }
          }
          viewBox="0 0 60 60"
        >
          <path
            d="M30 37a3 3 0 110 6 3 3 0 010-6zm0-10a3 3 0 110 6 3 3 0 010-6zm0-10a3 3 0 110 6 3 3 0 010-6z"
            fillRule="evenodd"
          />
        </svg>
      </button>
    </div>
    <div
      style={
        Object {
          "backgroundColor": "#fff",
          "color": "#1d1d20",
          "maxWidth": null,
          "minHeight": "100vh",
          "padding": "18px 20px 27px",
          "position": "fixed",
          "right": 0,
          "textAlign": "left",
          "top": 0,
          "transform": "translateX(100%)",
          "transition": "transform 400ms cubic-bezier(0.86, 0, 0.07, 1), visibility 0s linear 400ms",
          "visibility": 0,
          "width": "100%",
          "zIndex": 9999,
        }
      }
    >
      <div
        className="sc-ifAKCX cFlEyZ"
      >
        <div
          className="sc-bxivhb bUZGRr"
        >
          <h2
            id="projectsPageTitle"
            style={
              Object {
                "fontFamily": "Inter, \\"Helvetica Neue\\", Helvetica, Arial, sans-serif",
                "fontSize": "24px",
                "fontWeight": 100,
                "margin": 0,
              }
            }
          >
            Data Wrangling
          </h2>
          <h1
            id="projectsPageSubtitle"
            style={
              Object {
                "fontFamily": "Inter, \\"Helvetica Neue\\", Helvetica, Arial, sans-serif",
                "fontSize": "24px",
                "fontWeight": 600,
                "letterSpacing": "-0.12px",
                "lineHight": 1.25,
                "margin": 0,
              }
            }
          >
            View step
          </h1>
        </div>
      </div>
      <div
        className="sc-EHOje qQtBf"
      >
        <ul
          className="sc-bZQynM sc-gzVnrw JqJZP"
        />
        <ul
          className="sc-bZQynM sc-htoDjs LPVfx"
        />
      </div>
      <button
        id="topHeaderCloseMenuButton"
        onClick={[Function]}
        style={
          Object {
            "backgroundColor": "#fff",
            "border": "none",
            "borderRadius": "48px",
            "color": "#1d1d20",
            "cursor": "pointer",
            "display": "inline-block",
            "fontSize": "18px",
            "margin": "0",
            "minHeight": "48px",
            "outline": "none",
            "padding": "0",
            "position": "absolute",
            "right": 0,
            "top": "6px",
          }
        }
      >
        <svg
          style={
            Object {
              "fill": "#1d1d20",
              "height": "60px",
              "width": "60px",
            }
          }
          viewBox="0 0 60 60"
        >
          <path
            d="M39.192 17.98l2.829 2.828L32.828 30l9.193 9.192-2.829 2.829L30 32.828l-9.192 9.193-2.829-2.829L27.172 30l-9.193-9.192 2.829-2.829L30 27.172l9.192-9.193z"
            fillRule="evenodd"
          />
        </svg>
      </button>
    </div>
  </div>
  <form
    className="sc-bRBYWo ccSRck"
    name="dataWranglingForm"
  >
    <div
      className="sc-gqjmRU hnZXkc"
    >
      <div
        style={
          Object {
            "display": "flex",
            "flexDirection": "column",
            "maxWidth": "100%",
            "paddingBottom": "30px",
            "position": "relative",
          }
        }
      >
        <label
          htmlFor="description"
          style={
            Object {
              "border": "none",
              "borderTop": "1px solid #F0EFEF",
              "color": "#a6a7aa",
              "display": "block",
              "fontSize": "14px",
              "outline": "none",
              "paddingTop": "8px",
              "width": "100%",
            }
          }
        >
          Description
        </label>
        <input
          disabled={true}
          id="description"
          name="description"
          onChange={[Function]}
          placeholder="Description"
          style={
            Object {
              "backgroundColor": "transparent",
              "border": "none",
              "color": "#1d1d20",
              "fontSize": "18px",
              "lineHeight": "24px",
              "outline": "none",
            }
          }
          type="text"
          value="local:blank_cells.py"
        />
        <div
          style={
            Object {
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        />
      </div>
    </div>
    <pre
      style={
        Object {
          "backgroundColor": "#fff",
        }
      }
    >
      <code>
        
      
        <span
          className="hljs-keyword"
          style={Object {}}
        >
          import
        </span>
         pandas 
        <span
          className="hljs-keyword"
          style={Object {}}
        >
          as
        </span>
         pd
      
        <span
          className="hljs-keyword"
          style={Object {}}
        >
          import
        </span>
         numpy 
        <span
          className="hljs-keyword"
          style={Object {}}
        >
          as
        </span>
         np
      
      
        <span
          className="hljs-string"
          style={Object {}}
        >
          """
      Here are some ways to handle blank cells
          1. Fill Blank cells with any value you want
          2. Forward or backward fill the values
          3. Remove rows with Blank cells
      """
        </span>
        
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # Sample dataset
        </span>
        
      df = pd.DataFrame(
          [[np.nan, 
        <span
          className="hljs-number"
          style={Object {}}
        >
          2
        </span>
        , np.nan, 
        <span
          className="hljs-number"
          style={Object {}}
        >
          0
        </span>
        ], [
        <span
          className="hljs-number"
          style={Object {}}
        >
          3
        </span>
        , 
        <span
          className="hljs-number"
          style={Object {}}
        >
          4
        </span>
        , np.nan, 
        <span
          className="hljs-number"
          style={Object {}}
        >
          1
        </span>
        ], [np.nan, np.nan, np.nan, 
        <span
          className="hljs-number"
          style={Object {}}
        >
          5
        </span>
        ], [np.nan, 
        <span
          className="hljs-number"
          style={Object {}}
        >
          3
        </span>
        , np.nan, 
        <span
          className="hljs-number"
          style={Object {}}
        >
          4
        </span>
        ]],
          columns=list(
        <span
          className="hljs-string"
          style={Object {}}
        >
          'ABCD'
        </span>
        ),
      )
      
      
        <span
          className="hljs-string"
          style={Object {}}
        >
          """
      1. Fill
      """
        </span>
        
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # Simple fill for entire dataset
        </span>
        
      fill_value = 
        <span
          className="hljs-number"
          style={Object {}}
        >
          10
        </span>
        
      df = df.fillna(fill_value)
      
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # Simple fill for specific field
        </span>
        
      column_fill_value = 
        <span
          className="hljs-number"
          style={Object {}}
        >
          5
        </span>
        
      df = df[
        <span
          className="hljs-string"
          style={Object {}}
        >
          "A"
        </span>
        ].fillna(fill_value, inplace=
        <span
          className="hljs-keyword"
          style={Object {}}
        >
          True
        </span>
        )
      
      
        <span
          className="hljs-string"
          style={Object {}}
        >
          """
      2. Forward and Backward fill
      """
        </span>
        
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # forward fill for entire dataset (Fills with previous non-empty value)
        </span>
        
      df = df.fillna(method=
        <span
          className="hljs-string"
          style={Object {}}
        >
          "ffill"
        </span>
        )
      
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # forward fill column specific
        </span>
        
      df = df[
        <span
          className="hljs-string"
          style={Object {}}
        >
          "A"
        </span>
        ].fillna(method=
        <span
          className="hljs-string"
          style={Object {}}
        >
          'ffill'
        </span>
        , inplace=
        <span
          className="hljs-keyword"
          style={Object {}}
        >
          True
        </span>
        )
      
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # backward fill (Fills with next non-empty value)
        </span>
        
      df = df.fillna(method=
        <span
          className="hljs-string"
          style={Object {}}
        >
          "bfill"
        </span>
        )
      
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # backward fill column specific
        </span>
        
      df = df[
        <span
          className="hljs-string"
          style={Object {}}
        >
          "A"
        </span>
        ].fillna(method=
        <span
          className="hljs-string"
          style={Object {}}
        >
          'bfill'
        </span>
        , inplace=
        <span
          className="hljs-keyword"
          style={Object {}}
        >
          True
        </span>
        )
      
      
        <span
          className="hljs-string"
          style={Object {}}
        >
          """
      3. Drop rows
      It is not possible to just drop one blank cell. we would need to drop the whole row or column to
      clean our dataset so there can be two cases of blank cells in rows and columns.
      1. All cells are blank (empty row or column)
      2. One or more cells are blank (partially empty row or column)
      """
        </span>
        
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # Empty Rows
        </span>
        
      df = df.dropna(how=
        <span
          className="hljs-string"
          style={Object {}}
        >
          'all'
        </span>
        , axis=
        <span
          className="hljs-number"
          style={Object {}}
        >
          0
        </span>
        )
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # Empty Columns
        </span>
        
      df = df.dropna(how=
        <span
          className="hljs-string"
          style={Object {}}
        >
          'all'
        </span>
        , axis=
        <span
          className="hljs-number"
          style={Object {}}
        >
          1
        </span>
        )
      
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # Empty Rows (specific column)
        </span>
        
      df = df[
        <span
          className="hljs-string"
          style={Object {}}
        >
          'A'
        </span>
        ].dropna(how=
        <span
          className="hljs-string"
          style={Object {}}
        >
          'all'
        </span>
        , axis=
        <span
          className="hljs-number"
          style={Object {}}
        >
          0
        </span>
        )
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # Empty Columns (specific column)
        </span>
        
      df = df[
        <span
          className="hljs-string"
          style={Object {}}
        >
          'A'
        </span>
        ].dropna(how=
        <span
          className="hljs-string"
          style={Object {}}
        >
          'all'
        </span>
        , axis=
        <span
          className="hljs-number"
          style={Object {}}
        >
          1
        </span>
        )
      
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # Partially empty Rows
        </span>
        
      df = df.dropna(how=
        <span
          className="hljs-string"
          style={Object {}}
        >
          'any'
        </span>
        , axis=
        <span
          className="hljs-number"
          style={Object {}}
        >
          0
        </span>
        )
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # Partially empty Columns
        </span>
        
      df = df.dropna(how=
        <span
          className="hljs-string"
          style={Object {}}
        >
          'any'
        </span>
        , axis=
        <span
          className="hljs-number"
          style={Object {}}
        >
          1
        </span>
        )
      
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # Partially empty Rows (specific column)
        </span>
        
      df = df.dropna(how=
        <span
          className="hljs-string"
          style={Object {}}
        >
          'any'
        </span>
        , axis=
        <span
          className="hljs-number"
          style={Object {}}
        >
          0
        </span>
        )
      
        <span
          className="hljs-comment"
          style={Object {}}
        >
          # Partially empty Columns (specific column)
        </span>
        
      df = df.dropna(how=
        <span
          className="hljs-string"
          style={Object {}}
        >
          'any'
        </span>
        , axis=
        <span
          className="hljs-number"
          style={Object {}}
        >
          1
        </span>
        )
    
      </code>
    </pre>
  </form>
  <div
    className="sc-csuQGl dcDvzg"
  >
    <button
      onClick={[Function]}
      style={
        Object {
          "backgroundColor": "#f0efef",
          "border": "none",
          "borderRadius": "48px",
          "color": "#1d1d20",
          "cursor": "pointer",
          "display": "inline-block",
          "fontSize": "18px",
          "margin": "0",
          "marginRight": 10,
          "minHeight": "48px",
          "outline": "none",
          "padding": "0",
          "width": "100%",
        }
      }
    >
      Back
    </button>
    <button
      onClick={[Function]}
      style={
        Object {
          "backgroundColor": "#1d1d20",
          "border": "none",
          "borderRadius": "48px",
          "color": "#fff",
          "cursor": "pointer",
          "display": "inline-block",
          "fontSize": "18px",
          "margin": "0",
          "minHeight": "48px",
          "outline": "none",
          "padding": "0",
          "width": "100%",
        }
      }
    >
      OK
    </button>
  </div>
</div>
`;
