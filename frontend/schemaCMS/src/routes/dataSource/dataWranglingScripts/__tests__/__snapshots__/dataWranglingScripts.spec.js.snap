// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataWranglingScripts: Component should render correctly 1`] = `
<Fragment>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
    title="Data Wrangling"
  />
  <TopHeader
    headerSubtitle={
      <FormattedMessage
        defaultMessage="Data Wrangling"
        id="dataSource.dataWranglingScripts.subTitle"
        values={Object {}}
      />
    }
    primaryMenuItems={Array []}
    secondaryMenuItems={Array []}
  />
  <ContextHeader
    subtitle={
      <FormattedMessage
        defaultMessage="Data Wrangling"
        id="dataSource.dataWranglingScripts.subTitle"
        values={Object {}}
      />
    }
  >
    <DataSourceNavigation
      bindSubmitForm={[Function]}
      customScripts={Array []}
      dataSource={
        Object {
          "metaData": Object {},
        }
      }
      dataWranglingScripts={
        Array [
          Object {
            "id": 1,
            "isPredefined": false,
            "name": "name 1",
            "specs": Object {},
            "type": "uploaded",
          },
          Object {
            "id": 2,
            "isPredefined": true,
            "name": "name 2",
            "specs": Object {},
            "type": "default",
          },
          Object {
            "id": 3,
            "isPredefined": true,
            "name": "name 3",
            "specs": Object {
              "type": "type",
            },
            "type": "custom",
          },
        ]
      }
      fetchDataWranglingScripts={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "dataSourceId": "1",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        }
      }
      hideOnDesktop={false}
      history={
        Object {
          "goBack": [Function],
          "push": [Function],
        }
      }
      imageScrapingFields={Array []}
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isAdmin={true}
      match={
        Object {
          "params": Object {
            "dataSourceId": "1",
            "projectId": "1",
            "step": "3",
          },
          "url": "/datasource/14/3",
        }
      }
      sendUpdatedDataWranglingScript={[Function]}
      uploadScript={[Function]}
    />
  </ContextHeader>
  <LoadingWrapper
    error={null}
    loading={false}
    noData={false}
    noDataContent={null}
  >
    <styled.div>
      <styled.div />
      <styled.div>
        <FormattedMessage
          defaultMessage="{length} {length, plural,one {Step} other {Steps}}"
          id="dataSource.dataWranglingScripts.steps"
          values={
            Object {
              "length": 3,
            }
          }
        />
      </styled.div>
      <styled.div>
        <Component
          accept=".py"
          disabled={false}
          id="fileUpload"
          onChange={[Function]}
          type="file"
        />
      </styled.div>
    </styled.div>
    <Formik
      enableReinitialize={true}
      initialValues={
        Object {
          "steps": Array [],
        }
      }
      isInitialValid={true}
      onSubmit={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
    >
      <Component />
    </Formik>
  </LoadingWrapper>
</Fragment>
`;

exports[`DataWranglingScripts: Component should render correctly form 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialValues": Object {
        "steps": Array [],
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setError": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validate": undefined,
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validationSchema": undefined,
      "values": Object {
        "steps": Array [],
      },
    }
  }
>
  <Component
    id="fieldStepsCheckboxGroup"
    name="steps"
    onChange={[Function]}
    value={Array []}
  >
    <Component
      id="checkbox-0"
      key="0"
      value="1"
    >
      <Styled(Link)
        to="/script/1"
      >
        name 1
        <styled.div />
        <styled.span>
          <FormattedMessage
            defaultMessage="Uploaded"
            id="dataSource.dataWranglingScripts.uploaded"
            values={Object {}}
          />
        </styled.span>
      </Styled(Link)>
    </Component>
    <Component
      id="checkbox-1"
      key="1"
      value="2"
    >
      <Styled(Link)
        to="/script/2"
      >
        name 2
        <styled.div />
        <styled.span>
          <FormattedMessage
            defaultMessage="Default"
            id="dataSource.dataWranglingScripts.default"
            values={Object {}}
          />
        </styled.span>
      </Styled(Link)>
    </Component>
    <Component
      id="checkbox-2"
      key="2"
      value="3"
    >
      <Styled(Link)
        to="/script/3"
      >
        name 3
        <styled.div />
        <styled.span>
          <FormattedMessage
            defaultMessage="Custom"
            id="dataSource.dataWranglingScripts.custom"
            values={Object {}}
          />
        </styled.span>
      </Styled(Link)>
    </Component>
  </Component>
  <NavigationContainer
    fixed={false}
    hideOnDesktop={false}
    right={true}
  >
    <NextButton
      disabled={true}
      loading={false}
      onClick={[Function]}
    >
      <FormattedMessage
        defaultMessage="Save"
        id="dataSource.dataWranglingScripts.save"
        values={Object {}}
      />
    </NextButton>
  </NavigationContainer>
  <DataSourceNavigation
    bindSubmitForm={[Function]}
    customScripts={Array []}
    dataSource={
      Object {
        "metaData": Object {},
      }
    }
    dataWranglingScripts={
      Array [
        Object {
          "id": 1,
          "isPredefined": false,
          "name": "name 1",
          "specs": Object {},
          "type": "uploaded",
        },
        Object {
          "id": 2,
          "isPredefined": true,
          "name": "name 2",
          "specs": Object {},
          "type": "default",
        },
        Object {
          "id": 3,
          "isPredefined": true,
          "name": "name 3",
          "specs": Object {
            "type": "type",
          },
          "type": "custom",
        },
      ]
    }
    fetchDataWranglingScripts={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "dataSourceId": "1",
            },
          ],
          Array [
            Object {
              "dataSourceId": "1",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      }
    }
    hideOnDesktop={true}
    history={
      Object {
        "goBack": [Function],
        "push": [Function],
      }
    }
    imageScrapingFields={Array []}
    intl={
      Object {
        "formatMessage": [Function],
      }
    }
    isAdmin={true}
    match={
      Object {
        "params": Object {
          "dataSourceId": "1",
          "projectId": "1",
          "step": "3",
        },
        "url": "/datasource/14/3",
      }
    }
    sendUpdatedDataWranglingScript={[Function]}
    uploadScript={[Function]}
  />
</ContextProvider>
`;
