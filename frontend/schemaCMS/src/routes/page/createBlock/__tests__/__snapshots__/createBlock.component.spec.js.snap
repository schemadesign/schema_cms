// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreatePageBlock: Component should render correctly 1`] = `
<styled.div>
  <TopHeader
    headerSubtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    headerTitle={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <ContextHeader
    subtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    title={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <styled.form
    onSubmit={[Function]}
  >
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      fullWidth={true}
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      isEdit={false}
      label="Block Name"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="name"
      onChange={[Function]}
      placeholder="Name"
      setFieldValue={[Function]}
      touched={Object {}}
    />
    <Select
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      id="fieldBlockType"
      label="Type"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="type"
      onSelect={[Function]}
      options={
        Array [
          Object {
            "label": "Image Upload",
            "value": "image_uploaded",
          },
          Object {
            "label": "Markdown Text",
            "value": "markdown_text",
          },
          Object {
            "label": "Embed",
            "value": "youtube_embed",
          },
          Object {
            "label": "Code Snippet",
            "value": "code_snippet",
          },
          Object {
            "label": "Select one",
            "value": "none",
          },
        ]
      }
      setFieldValue={[Function]}
      value="none"
    />
    <NavigationContainer
      hideOnDesktop={false}
      right={false}
    >
      <BackButton
        disabled={false}
        id="backBtn"
      >
        <FormattedMessage
          defaultMessage="Cancel"
          id="directory.createPageBlock.cancel"
          values={Object {}}
        />
      </BackButton>
      <NextButton
        disabled={true}
        id="createPageBlockBtn"
        loading={false}
        type="submit"
      >
        <FormattedMessage
          defaultMessage="Create"
          id="directory.createPageBlock.createPageBlock"
          values={Object {}}
        />
      </NextButton>
    </NavigationContainer>
  </styled.form>
</styled.div>
`;

exports[`CreatePageBlock: Component should render correctly with block type 1`] = `
<styled.div>
  <TopHeader
    headerSubtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    headerTitle={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <ContextHeader
    subtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    title={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <styled.form
    onSubmit={[Function]}
  >
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      fullWidth={true}
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      isEdit={false}
      label="Block Name"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="name"
      onChange={[Function]}
      placeholder="Name"
      setFieldValue={[Function]}
      touched={Object {}}
    />
    <Select
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      id="fieldBlockType"
      label="Type"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="type"
      onSelect={[Function]}
      options={
        Array [
          Object {
            "label": "Image Upload",
            "value": "image_uploaded",
          },
          Object {
            "label": "Markdown Text",
            "value": "markdown_text",
          },
          Object {
            "label": "Embed",
            "value": "youtube_embed",
          },
          Object {
            "label": "Code Snippet",
            "value": "code_snippet",
          },
          Object {
            "label": "Select one",
            "value": "none",
          },
        ]
      }
      setFieldValue={[Function]}
      value="type"
    />
    <NavigationContainer
      hideOnDesktop={false}
      right={false}
    >
      <BackButton
        disabled={false}
        id="backBtn"
      >
        <FormattedMessage
          defaultMessage="Cancel"
          id="directory.createPageBlock.cancel"
          values={Object {}}
        />
      </BackButton>
      <NextButton
        disabled={true}
        id="createPageBlockBtn"
        loading={false}
        type="submit"
      >
        <FormattedMessage
          defaultMessage="Create"
          id="directory.createPageBlock.createPageBlock"
          values={Object {}}
        />
      </NextButton>
    </NavigationContainer>
  </styled.form>
</styled.div>
`;

exports[`CreatePageBlock: Component should render correctly with code type 1`] = `
<styled.div>
  <TopHeader
    headerSubtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    headerTitle={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <ContextHeader
    subtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    title={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <styled.form
    onSubmit={[Function]}
  >
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      fullWidth={true}
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      isEdit={false}
      label="Block Name"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="name"
      onChange={[Function]}
      placeholder="Name"
      setFieldValue={[Function]}
      touched={Object {}}
    />
    <Select
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      id="fieldBlockType"
      label="Type"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="type"
      onSelect={[Function]}
      options={
        Array [
          Object {
            "label": "Image Upload",
            "value": "image_uploaded",
          },
          Object {
            "label": "Markdown Text",
            "value": "markdown_text",
          },
          Object {
            "label": "Embed",
            "value": "youtube_embed",
          },
          Object {
            "label": "Code Snippet",
            "value": "code_snippet",
          },
          Object {
            "label": "Select one",
            "value": "none",
          },
        ]
      }
      setFieldValue={[Function]}
      value="code_snippet"
    />
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      fullWidth={true}
      handleBlur={[Function]}
      handleChange={[Function]}
      handleSubmit={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isEdit={false}
      label="Code Snippet"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      multiline={true}
      name="content"
      onChange={[Function]}
      placeholder="
    <button id=\\"my-button\\">
        Click Me
    </button>
    <div class=\\"hello-div\\">
        Hello
    </div>
    "
      setFieldValue={[Function]}
      touched={Object {}}
      values={
        Object {
          "type": "code_snippet",
        }
      }
    />
    <NavigationContainer
      hideOnDesktop={false}
      right={false}
    >
      <BackButton
        disabled={false}
        id="backBtn"
      >
        <FormattedMessage
          defaultMessage="Cancel"
          id="directory.createPageBlock.cancel"
          values={Object {}}
        />
      </BackButton>
      <NextButton
        disabled={true}
        id="createPageBlockBtn"
        loading={false}
        type="submit"
      >
        <FormattedMessage
          defaultMessage="Create"
          id="directory.createPageBlock.createPageBlock"
          values={Object {}}
        />
      </NextButton>
    </NavigationContainer>
  </styled.form>
</styled.div>
`;

exports[`CreatePageBlock: Component should render correctly with embed type 1`] = `
<styled.div>
  <TopHeader
    headerSubtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    headerTitle={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <ContextHeader
    subtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    title={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <styled.form
    onSubmit={[Function]}
  >
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      fullWidth={true}
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      isEdit={false}
      label="Block Name"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="name"
      onChange={[Function]}
      placeholder="Name"
      setFieldValue={[Function]}
      touched={Object {}}
    />
    <Select
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      id="fieldBlockType"
      label="Type"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="type"
      onSelect={[Function]}
      options={
        Array [
          Object {
            "label": "Image Upload",
            "value": "image_uploaded",
          },
          Object {
            "label": "Markdown Text",
            "value": "markdown_text",
          },
          Object {
            "label": "Embed",
            "value": "youtube_embed",
          },
          Object {
            "label": "Code Snippet",
            "value": "code_snippet",
          },
          Object {
            "label": "Select one",
            "value": "none",
          },
        ]
      }
      setFieldValue={[Function]}
      value="youtube_embed"
    />
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      fullWidth={true}
      handleBlur={[Function]}
      handleChange={[Function]}
      handleSubmit={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isEdit={false}
      label="Embed Code"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      multiline={true}
      name="content"
      onChange={[Function]}
      placeholder="
    <iframe 
        width=\\"560\\" 
        height=\\"315\\" 
        src=\\"https://www.youtube.com/embed/q_vRX20Asqg\\"
        frameborder=\\"0\\"
        allowfullscreen
    />
    "
      setFieldValue={[Function]}
      touched={Object {}}
      values={
        Object {
          "type": "youtube_embed",
        }
      }
    />
    <NavigationContainer
      hideOnDesktop={false}
      right={false}
    >
      <BackButton
        disabled={false}
        id="backBtn"
      >
        <FormattedMessage
          defaultMessage="Cancel"
          id="directory.createPageBlock.cancel"
          values={Object {}}
        />
      </BackButton>
      <NextButton
        disabled={true}
        id="createPageBlockBtn"
        loading={false}
        type="submit"
      >
        <FormattedMessage
          defaultMessage="Create"
          id="directory.createPageBlock.createPageBlock"
          values={Object {}}
        />
      </NextButton>
    </NavigationContainer>
  </styled.form>
</styled.div>
`;

exports[`CreatePageBlock: Component should render correctly with image type 1`] = `
<styled.div>
  <TopHeader
    headerSubtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    headerTitle={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <ContextHeader
    subtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    title={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <styled.form
    onSubmit={[Function]}
  >
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      fullWidth={true}
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      isEdit={false}
      label="Block Name"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="name"
      onChange={[Function]}
      placeholder="Name"
      setFieldValue={[Function]}
      touched={Object {}}
    />
    <Select
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      id="fieldBlockType"
      label="Type"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="type"
      onSelect={[Function]}
      options={
        Array [
          Object {
            "label": "Image Upload",
            "value": "image_uploaded",
          },
          Object {
            "label": "Markdown Text",
            "value": "markdown_text",
          },
          Object {
            "label": "Embed",
            "value": "youtube_embed",
          },
          Object {
            "label": "Code Snippet",
            "value": "code_snippet",
          },
          Object {
            "label": "Select one",
            "value": "none",
          },
        ]
      }
      setFieldValue={[Function]}
      value="image_uploaded"
    />
    <Uploader
      accept="image/gif,image/jpeg"
      checkOnlyErrors={true}
      errors={Object {}}
      handleBlur={[Function]}
      handleChange={[Function]}
      handleSubmit={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      id="fileUpload"
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      label="File Name"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="image"
      onChange={[Function]}
      setFieldValue={[Function]}
      touched={Object {}}
      type="file"
      values={
        Object {
          "type": "image_uploaded",
        }
      }
    />
    <NavigationContainer
      hideOnDesktop={false}
      right={false}
    >
      <BackButton
        disabled={false}
        id="backBtn"
      >
        <FormattedMessage
          defaultMessage="Cancel"
          id="directory.createPageBlock.cancel"
          values={Object {}}
        />
      </BackButton>
      <NextButton
        disabled={true}
        id="createPageBlockBtn"
        loading={false}
        type="submit"
      >
        <FormattedMessage
          defaultMessage="Create"
          id="directory.createPageBlock.createPageBlock"
          values={Object {}}
        />
      </NextButton>
    </NavigationContainer>
  </styled.form>
</styled.div>
`;

exports[`CreatePageBlock: Component should render correctly with markdown type 1`] = `
<styled.div>
  <TopHeader
    headerSubtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    headerTitle={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <ContextHeader
    subtitle={
      <FormattedMessage
        defaultMessage="Create"
        id="directory.createPageBlock.subTitle"
        values={Object {}}
      />
    }
    title={
      <FormattedMessage
        defaultMessage="Page Block"
        id="directory.createPageBlock.title"
        values={Object {}}
      />
    }
  />
  <styled.form
    onSubmit={[Function]}
  >
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      fullWidth={true}
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      isEdit={false}
      label="Block Name"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="name"
      onChange={[Function]}
      placeholder="Name"
      setFieldValue={[Function]}
      touched={Object {}}
    />
    <Select
      handleBlur={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      id="fieldBlockType"
      label="Type"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      name="type"
      onSelect={[Function]}
      options={
        Array [
          Object {
            "label": "Image Upload",
            "value": "image_uploaded",
          },
          Object {
            "label": "Markdown Text",
            "value": "markdown_text",
          },
          Object {
            "label": "Embed",
            "value": "youtube_embed",
          },
          Object {
            "label": "Code Snippet",
            "value": "code_snippet",
          },
          Object {
            "label": "Select one",
            "value": "none",
          },
        ]
      }
      setFieldValue={[Function]}
      value="markdown_text"
    />
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      fullWidth={true}
      handleBlur={[Function]}
      handleChange={[Function]}
      handleSubmit={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      intl={
        Object {
          "formatMessage": [Function],
        }
      }
      isEdit={false}
      label="Markdown Text"
      match={
        Object {
          "params": Object {
            "pageId": "1",
          },
        }
      }
      multiline={true}
      name="content"
      onChange={[Function]}
      placeholder="
    # My Cool Title
    
    ## Awesome subtitle
    
    Description **bold**
    "
      setFieldValue={[Function]}
      touched={Object {}}
      values={
        Object {
          "type": "markdown_text",
        }
      }
    />
    <NavigationContainer
      hideOnDesktop={false}
      right={false}
    >
      <BackButton
        disabled={false}
        id="backBtn"
      >
        <FormattedMessage
          defaultMessage="Cancel"
          id="directory.createPageBlock.cancel"
          values={Object {}}
        />
      </BackButton>
      <NextButton
        disabled={true}
        id="createPageBlockBtn"
        loading={false}
        type="submit"
      >
        <FormattedMessage
          defaultMessage="Create"
          id="directory.createPageBlock.createPageBlock"
          values={Object {}}
        />
      </NextButton>
    </NavigationContainer>
  </styled.form>
</styled.div>
`;
