// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PageBlockForm: Component should render correctly 1`] = `
<Fragment>
  <TextInput
    checkOnlyErrors={false}
    errors={Object {}}
    fullWidth={true}
    isEdit={true}
    label="Block Name"
    name="name"
    onChange={[Function]}
    placeholder="Name"
    setFieldValue={[Function]}
    touched={Object {}}
    value=""
  />
  <Select
    id="fieldBlockType"
    label="Type"
    name="type"
    onSelect={[Function]}
    options={
      Array [
        Object {
          "label": "Image Upload",
          "value": "image_uploaded",
        },
        Object {
          "label": "Markdown Text",
          "value": "markdown_text",
        },
        Object {
          "label": "Embed",
          "value": "youtube_embed",
        },
        Object {
          "label": "Code Snippet",
          "value": "code_snippet",
        },
      ]
    }
    placeholder="Select type"
    setFieldValue={[Function]}
    value="none"
  />
</Fragment>
`;

exports[`PageBlockForm: Component should render correctly with code type 1`] = `
<Fragment>
  <TextInput
    checkOnlyErrors={false}
    errors={Object {}}
    fullWidth={true}
    isEdit={true}
    label="Block Name"
    name="name"
    onChange={[Function]}
    placeholder="Name"
    setFieldValue={[Function]}
    touched={Object {}}
    value="code name"
  />
  <Select
    id="fieldBlockType"
    label="Type"
    name="type"
    onSelect={[Function]}
    options={
      Array [
        Object {
          "label": "Image Upload",
          "value": "image_uploaded",
        },
        Object {
          "label": "Markdown Text",
          "value": "markdown_text",
        },
        Object {
          "label": "Embed",
          "value": "youtube_embed",
        },
        Object {
          "label": "Code Snippet",
          "value": "code_snippet",
        },
      ]
    }
    placeholder="Select type"
    setFieldValue={[Function]}
    value="code_snippet"
  />
  <TextInput
    checkOnlyErrors={false}
    errors={Object {}}
    fullWidth={true}
    handleChange={[Function]}
    intl={
      Object {
        "formatMessage": [Function],
      }
    }
    isEdit={false}
    label="Code Snippet"
    multiline={true}
    name="code_snippet-content"
    onChange={[Function]}
    placeholder="
    <button id=\\"my-button\\">
        Click Me
    </button>
    <div class=\\"hello-div\\">
        Hello
    </div>
    "
    setFieldValue={[Function]}
    touched={Object {}}
    values={
      Object {
        "content": "code content",
        "name": "code name",
        "type": "code_snippet",
      }
    }
  />
</Fragment>
`;

exports[`PageBlockForm: Component should render correctly with embed type 1`] = `
<Fragment>
  <TextInput
    checkOnlyErrors={false}
    errors={Object {}}
    fullWidth={true}
    isEdit={true}
    label="Block Name"
    name="name"
    onChange={[Function]}
    placeholder="Name"
    setFieldValue={[Function]}
    touched={Object {}}
    value="embed name"
  />
  <Select
    id="fieldBlockType"
    label="Type"
    name="type"
    onSelect={[Function]}
    options={
      Array [
        Object {
          "label": "Image Upload",
          "value": "image_uploaded",
        },
        Object {
          "label": "Markdown Text",
          "value": "markdown_text",
        },
        Object {
          "label": "Embed",
          "value": "youtube_embed",
        },
        Object {
          "label": "Code Snippet",
          "value": "code_snippet",
        },
      ]
    }
    placeholder="Select type"
    setFieldValue={[Function]}
    value="youtube_embed"
  />
  <TextInput
    checkOnlyErrors={false}
    errors={Object {}}
    fullWidth={true}
    handleChange={[Function]}
    intl={
      Object {
        "formatMessage": [Function],
      }
    }
    isEdit={false}
    label="Embed Code"
    multiline={true}
    name="youtube_embed-content"
    onChange={[Function]}
    placeholder="
    <iframe 
        width=\\"560\\" 
        height=\\"315\\" 
        src=\\"https://www.youtube.com/embed/avideo\\"
        frameborder=\\"0\\"
        allowfullscreen
    />
    "
    setFieldValue={[Function]}
    touched={Object {}}
    values={
      Object {
        "content": "embed content",
        "name": "embed name",
        "type": "youtube_embed",
      }
    }
  />
</Fragment>
`;

exports[`PageBlockForm: Component should render correctly with image type 1`] = `
<Fragment>
  <TextInput
    checkOnlyErrors={false}
    errors={Object {}}
    fullWidth={true}
    isEdit={true}
    label="Block Name"
    name="name"
    onChange={[Function]}
    placeholder="Name"
    setFieldValue={[Function]}
    touched={Object {}}
    value="name"
  />
  <Select
    id="fieldBlockType"
    label="Type"
    name="type"
    onSelect={[Function]}
    options={
      Array [
        Object {
          "label": "Image Upload",
          "value": "image_uploaded",
        },
        Object {
          "label": "Markdown Text",
          "value": "markdown_text",
        },
        Object {
          "label": "Embed",
          "value": "youtube_embed",
        },
        Object {
          "label": "Code Snippet",
          "value": "code_snippet",
        },
      ]
    }
    placeholder="Select type"
    setFieldValue={[Function]}
    value="image_uploaded"
  />
  <Uploader
    accept=".png, .jpg, .jpeg, .gif"
    checkOnlyErrors={true}
    errors={Object {}}
    fileName="image name"
    handleChange={[Function]}
    id="fileUpload"
    intl={
      Object {
        "formatMessage": [Function],
      }
    }
    label="File Name"
    name="image"
    onChange={[Function]}
    setFieldValue={[Function]}
    touched={Object {}}
    type="file"
    values={
      Object {
        "image": "image",
        "imageName": "image name",
        "name": "name",
        "type": "image_uploaded",
      }
    }
  />
</Fragment>
`;

exports[`PageBlockForm: Component should render correctly with markdown type 1`] = `
<Fragment>
  <TextInput
    checkOnlyErrors={false}
    errors={Object {}}
    fullWidth={true}
    isEdit={true}
    label="Block Name"
    name="name"
    onChange={[Function]}
    placeholder="Name"
    setFieldValue={[Function]}
    touched={Object {}}
    value="markdown name"
  />
  <Select
    id="fieldBlockType"
    label="Type"
    name="type"
    onSelect={[Function]}
    options={
      Array [
        Object {
          "label": "Image Upload",
          "value": "image_uploaded",
        },
        Object {
          "label": "Markdown Text",
          "value": "markdown_text",
        },
        Object {
          "label": "Embed",
          "value": "youtube_embed",
        },
        Object {
          "label": "Code Snippet",
          "value": "code_snippet",
        },
      ]
    }
    placeholder="Select type"
    setFieldValue={[Function]}
    value="markdown_text"
  />
  <TextInput
    checkOnlyErrors={false}
    errors={Object {}}
    fullWidth={true}
    handleChange={[Function]}
    intl={
      Object {
        "formatMessage": [Function],
      }
    }
    isEdit={false}
    label="Markdown Text"
    multiline={true}
    name="markdown_text-content"
    onChange={[Function]}
    placeholder="
    # My Cool Title
    
    ## Awesome subtitle
    
    Description **bold**
    "
    setFieldValue={[Function]}
    touched={Object {}}
    values={
      Object {
        "content": "markdown content",
        "name": "markdown name",
        "type": "markdown_text",
      }
    }
  />
</Fragment>
`;
