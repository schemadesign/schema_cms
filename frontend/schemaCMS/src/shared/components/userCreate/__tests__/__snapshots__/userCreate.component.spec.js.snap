// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserCreate: Component should render correctly 1`] = `
<styled.div>
  <TopHeader
    headerSubtitle={
      <FormattedMessage
        defaultMessage="You are adding {user} to {project}"
        id="userList.addUser"
        values={
          Object {
            "project": "",
            "user": "",
          }
        }
      />
    }
    headerTitle={
      <FormattedMessage
        defaultMessage="Users"
        id="userList.pageTitle"
        values={Object {}}
      />
    }
  />
  <styled.form
    onSubmit={[Function]}
  >
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      label="Name"
      name="firstName"
      onChange={[Function]}
      readOnly={true}
      touched={Object {}}
      value="undefined undefined"
    />
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      label="Email"
      name="email"
      onChange={[Function]}
      readOnly={true}
      touched={Object {}}
    />
    <TextInput
      checkOnlyErrors={false}
      errors={Object {}}
      label="Role"
      name="role"
      onChange={[Function]}
      readOnly={true}
      touched={Object {}}
    />
    <NavigationContainer
      right={false}
    >
      <BackButton
        disabled={false}
      >
        <FormattedMessage
          defaultMessage="Cancel"
          id="userList.cancel"
          values={Object {}}
        />
      </BackButton>
      <NextButton
        loading={false}
        type="submit"
      >
        <FormattedMessage
          defaultMessage="Add"
          id="userList.add"
          values={Object {}}
        />
      </NextButton>
    </NavigationContainer>
  </styled.form>
</styled.div>
`;

exports[`UserCreateCMS: Component should render correctly 1`] = `
<Formik
  displayName="user_create_cms_form"
  enableReinitialize={false}
  isInitialValid={false}
  onSubmit={[Function]}
  render={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "email",
        "role",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "email": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "undefined": false,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
        "role": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": "",
          "_deps": Array [],
          "_exclusive": Object {
            "required": true,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
/>
`;

exports[`UserCreateProject: Component should render correctly 1`] = `
<Formik
  displayName="user_create_cms_form"
  enableReinitialize={false}
  initialValues={
    Object {
      "role": "Editor",
    }
  }
  isInitialValid={true}
  onSubmit={[Function]}
  render={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "email",
        "role",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "email": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "undefined": false,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
        "role": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": "",
          "_deps": Array [],
          "_exclusive": Object {
            "required": true,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
/>
`;
