// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FilterForm: Component should render create form 1`] = `
<IntlProvider
  locale="en"
>
  <FilterForm
    createFilter={[Function]}
    dataSourceId="1"
    fieldsInfo={
      Object {
        "field": Object {
          "fieldType": "string",
          "filterType": Array [
            "checkbox",
          ],
          "unique": 1,
        },
      }
    }
    filter={Object {}}
    history={
      Object {
        "push": [Function],
      }
    }
  >
    <Formik
      enableReinitialize={false}
      initialValues={
        Object {
          "field": "field",
          "fieldType": "string",
          "filterType": "",
          "name": "",
          "unique": "1",
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
      validationSchema={
        ObjectSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_defaultDefault": [Function],
          "_deps": Array [],
          "_excludedEdges": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_nodes": Array [
            "name",
          ],
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "object",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "fields": Object {
            "name": StringSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "max": true,
                "min": true,
                "required": true,
              },
              "_mutate": undefined,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "tests": Array [
                [Function],
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        }
      }
    >
      <Styled(Form)>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "WrappedComponent": [Function],
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bZQynM",
                "isStatic": true,
                "lastClassName": "UzdGw",
                "rules": Array [
                  "
  padding-top: 24px;
",
                ],
              },
              "displayName": "Styled(Form)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bZQynM",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <Form
            className="sc-bZQynM UzdGw"
          >
            <Component
              className="sc-bZQynM UzdGw"
              formik={
                Object {
                  "dirty": false,
                  "errors": Object {},
                  "handleBlur": [Function],
                  "handleChange": [Function],
                  "handleReset": [Function],
                  "handleSubmit": [Function],
                  "initialValues": Object {
                    "field": "field",
                    "fieldType": "string",
                    "filterType": "",
                    "name": "",
                    "unique": "1",
                  },
                  "isSubmitting": false,
                  "isValid": false,
                  "isValidating": false,
                  "registerField": [Function],
                  "resetForm": [Function],
                  "setError": [Function],
                  "setErrors": [Function],
                  "setFieldError": [Function],
                  "setFieldTouched": [Function],
                  "setFieldValue": [Function],
                  "setFormikState": [Function],
                  "setStatus": [Function],
                  "setSubmitting": [Function],
                  "setTouched": [Function],
                  "setValues": [Function],
                  "status": undefined,
                  "submitCount": 0,
                  "submitForm": [Function],
                  "touched": Object {},
                  "unregisterField": [Function],
                  "validate": undefined,
                  "validateField": [Function],
                  "validateForm": [Function],
                  "validateOnBlur": true,
                  "validateOnChange": true,
                  "validationSchema": ObjectSchema {
                    "_blacklist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_conditions": Array [],
                    "_defaultDefault": [Function],
                    "_deps": Array [],
                    "_excludedEdges": Array [],
                    "_exclusive": Object {},
                    "_mutate": undefined,
                    "_nodes": Array [
                      "name",
                    ],
                    "_options": Object {
                      "abortEarly": true,
                      "recursive": true,
                    },
                    "_type": "object",
                    "_typeError": [Function],
                    "_whitelist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "fields": Object {
                      "name": StringSchema {
                        "_blacklist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "_conditions": Array [],
                        "_deps": Array [],
                        "_exclusive": Object {
                          "max": true,
                          "min": true,
                          "required": true,
                        },
                        "_mutate": undefined,
                        "_options": Object {
                          "abortEarly": true,
                          "recursive": true,
                        },
                        "_type": "string",
                        "_typeError": [Function],
                        "_whitelist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "tests": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                        "transforms": Array [
                          [Function],
                        ],
                      },
                    },
                    "tests": Array [],
                    "transforms": Array [
                      [Function],
                    ],
                  },
                  "values": Object {
                    "field": "field",
                    "fieldType": "string",
                    "filterType": "",
                    "name": "",
                    "unique": "1",
                  },
                }
              }
            >
              <form
                className="sc-bZQynM UzdGw"
                onReset={[Function]}
                onSubmit={[Function]}
              >
                <TextInput
                  checkOnlyErrors={false}
                  errors={Object {}}
                  fullWidth={true}
                  handleBlur={[Function]}
                  handleReset={[Function]}
                  handleSubmit={[Function]}
                  initialValues={
                    Object {
                      "field": "field",
                      "fieldType": "string",
                      "filterType": "",
                      "name": "",
                      "unique": "1",
                    }
                  }
                  isEdit={true}
                  isSubmitting={false}
                  isValidating={false}
                  label={
                    <FormattedMessage
                      defaultMessage="Filter Name"
                      id="shared.components.filter.name"
                      values={Object {}}
                    />
                  }
                  name="name"
                  onChange={[Function]}
                  registerField={[Function]}
                  resetForm={[Function]}
                  setError={[Function]}
                  setErrors={[Function]}
                  setFieldError={[Function]}
                  setFieldTouched={[Function]}
                  setFormikState={[Function]}
                  setStatus={[Function]}
                  setSubmitting={[Function]}
                  setTouched={[Function]}
                  setValues={[Function]}
                  submitCount={0}
                  submitForm={[Function]}
                  touched={Object {}}
                  unregisterField={[Function]}
                  validateField={[Function]}
                  validateForm={[Function]}
                  validateOnBlur={true}
                  validateOnChange={true}
                  value=""
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bdVaJa",
                            "isStatic": true,
                            "lastClassName": "bDWFJH",
                            "rules": Array [],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bdVaJa",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bdVaJa bDWFJH"
                      >
                        <Component
                          error={false}
                          fullWidth={true}
                          iconComponent={
                            <ForwardRef(styled.div)>
                              <Unknown />
                            </ForwardRef(styled.div)>
                          }
                          label={
                            <FormattedMessage
                              defaultMessage="Filter Name"
                              id="shared.components.filter.name"
                              values={Object {}}
                            />
                          }
                          name="name"
                          onChange={[Function]}
                          value=""
                        >
                          <TextFieldComponent
                            customInputStyles={Object {}}
                            customLabelStyles={Object {}}
                            error={false}
                            fullWidth={true}
                            iconComponent={
                              <ForwardRef(styled.div)>
                                <Unknown />
                              </ForwardRef(styled.div)>
                            }
                            label={
                              <FormattedMessage
                                defaultMessage="Filter Name"
                                id="shared.components.filter.name"
                                values={Object {}}
                              />
                            }
                            name="name"
                            onChange={[Function]}
                            type="text"
                            value=""
                          >
                            <div
                              style={
                                Object {
                                  "display": "flex",
                                  "flexDirection": "column",
                                  "maxWidth": "100%",
                                  "paddingBottom": "30px",
                                  "position": "relative",
                                }
                              }
                            >
                              <Component
                                customStyles={Object {}}
                                name="name"
                              >
                                <LabelComponent
                                  customStyles={Object {}}
                                  name="name"
                                >
                                  <label
                                    htmlFor="name"
                                    style={
                                      Object {
                                        "border": "none",
                                        "borderTop": "1px solid #2F2F36",
                                        "color": "#71737e",
                                        "display": "block",
                                        "fontSize": "14px",
                                        "outline": "none",
                                        "paddingTop": "8px",
                                        "width": "100%",
                                      }
                                    }
                                  >
                                    <FormattedMessage
                                      defaultMessage="Filter Name"
                                      id="shared.components.filter.name"
                                      values={Object {}}
                                    >
                                      <span>
                                        Filter Name
                                      </span>
                                    </FormattedMessage>
                                  </label>
                                </LabelComponent>
                              </Component>
                              <Component
                                customStyles={Object {}}
                                name="name"
                                onChange={[Function]}
                                type="text"
                                value=""
                              >
                                <InputComponent
                                  customStyles={Object {}}
                                  name="name"
                                  onChange={[Function]}
                                  type="text"
                                  value=""
                                >
                                  <input
                                    id="name"
                                    name="name"
                                    onChange={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "none",
                                        "color": "#FFF",
                                        "fontSize": "18px",
                                        "lineHeight": "24px",
                                        "outline": "none",
                                      }
                                    }
                                    type="text"
                                    value=""
                                  />
                                </InputComponent>
                              </Component>
                              <div
                                style={
                                  Object {
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  }
                                }
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bwzfXH",
                                          "isStatic": true,
                                          "lastClassName": "gLRQcl",
                                          "rules": Array [
                                            "
  padding-top: 7px;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bwzfXH",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bwzfXH gLRQcl"
                                    >
                                      <Component>
                                        <EditIconComponent>
                                          <SvgEdit
                                            style={
                                              Object {
                                                "fill": "#FFF",
                                                "height": "30px",
                                                "width": "30px",
                                              }
                                            }
                                          >
                                            <svg
                                              style={
                                                Object {
                                                  "fill": "#FFF",
                                                  "height": "30px",
                                                  "width": "30px",
                                                }
                                              }
                                              viewBox="0 0 30 30"
                                            >
                                              <path
                                                d="M21.789 10.92a.724.724 0 000-1.022l-1.687-1.687a.724.724 0 00-1.022 0l-1.322 1.322 2.709 2.709 1.322-1.322zM9 18.291V21h2.709l7.992-7.992-2.709-2.71L9 18.292z"
                                                fillRule="evenodd"
                                              />
                                            </svg>
                                          </SvgEdit>
                                        </EditIconComponent>
                                      </Component>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </div>
                          </TextFieldComponent>
                        </Component>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </TextInput>
                <Select
                  label={
                    <FormattedMessage
                      defaultMessage="Field"
                      id="shared.components.filter.field"
                      values={Object {}}
                    />
                  }
                  name="field"
                  onSelect={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "field",
                        "value": "field",
                      },
                    ]
                  }
                  value="field"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": true,
                            "lastClassName": "bvPMDH",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
  padding-bottom: 30px;
  position: relative;

  label {
    margin-bottom: 1px;
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bxivhb bvPMDH"
                      >
                        <Component
                          id="fieldProjectStatusLabel"
                        >
                          <LabelComponent
                            customStyles={Object {}}
                            id="fieldProjectStatusLabel"
                          >
                            <label
                              id="fieldProjectStatusLabel"
                              style={
                                Object {
                                  "border": "none",
                                  "borderTop": "1px solid #2F2F36",
                                  "color": "#71737e",
                                  "display": "block",
                                  "fontSize": "14px",
                                  "outline": "none",
                                  "paddingTop": "8px",
                                  "width": "100%",
                                }
                              }
                            >
                              <FormattedMessage
                                defaultMessage="Field"
                                id="shared.components.filter.field"
                                values={Object {}}
                              >
                                <span>
                                  Field
                                </span>
                              </FormattedMessage>
                            </label>
                          </LabelComponent>
                        </Component>
                        <input
                          id="field"
                          name="field"
                          type="hidden"
                          value="field"
                        />
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "bmDYeY",
                                  "rules": Array [
                                    "
  position: absolute;
  right: 0;
  top: 5px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-ifAKCX bmDYeY"
                            >
                              <Component>
                                <EditIconComponent>
                                  <SvgEdit
                                    style={
                                      Object {
                                        "fill": "#FFF",
                                        "height": "30px",
                                        "width": "30px",
                                      }
                                    }
                                  >
                                    <svg
                                      style={
                                        Object {
                                          "fill": "#FFF",
                                          "height": "30px",
                                          "width": "30px",
                                        }
                                      }
                                      viewBox="0 0 30 30"
                                    >
                                      <path
                                        d="M21.789 10.92a.724.724 0 000-1.022l-1.687-1.687a.724.724 0 00-1.022 0l-1.322 1.322 2.709 2.709 1.322-1.322zM9 18.291V21h2.709l7.992-7.992-2.709-2.71L9 18.292z"
                                        fillRule="evenodd"
                                      />
                                    </svg>
                                  </SvgEdit>
                                </EditIconComponent>
                              </Component>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <Component
                          onSelect={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "field",
                                "selected": true,
                                "value": "field",
                              },
                            ]
                          }
                        >
                          <SelectComponent
                            native={false}
                            onSelect={[Function]}
                            options={
                              Array [
                                Object {
                                  "label": "field",
                                  "selected": true,
                                  "value": "field",
                                },
                              ]
                            }
                          >
                            <div
                              style={
                                Object {
                                  "color": "#FFF",
                                  "display": "flex",
                                  "width": "100%",
                                }
                              }
                            >
                              <div
                                style={
                                  Object {
                                    "cursor": "pointer",
                                    "display": "flex",
                                    "position": "relative",
                                    "width": "100%",
                                  }
                                }
                              >
                                <div
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "cursor": "pointer",
                                      "display": "flex",
                                      "height": "30px",
                                      "width": "100%",
                                    }
                                  }
                                >
                                  <div
                                    style={
                                      Object {
                                        "alignItems": "center",
                                        "cursor": "pointer",
                                        "display": "flex",
                                        "height": "30px",
                                      }
                                    }
                                  >
                                    field
                                  </div>
                                </div>
                                <div
                                  style={
                                    Object {
                                      "backgroundColor": "#1d1d20",
                                      "display": "none",
                                      "flexDirection": "column",
                                      "left": "0",
                                      "maxHeight": "175px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "top": "46px",
                                      "width": "100%",
                                      "zIndex": 2,
                                    }
                                  }
                                >
                                  <div
                                    id="select-item-0"
                                    key="0"
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "borderTop": "none",
                                        "cursor": "pointer",
                                        "display": "flex",
                                        "padding": "7px",
                                      }
                                    }
                                  >
                                    field
                                  </div>
                                </div>
                              </div>
                            </div>
                          </SelectComponent>
                        </Component>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </Select>
                <Select
                  label={
                    <FormattedMessage
                      defaultMessage="Filter Type"
                      id="shared.components.filter.filterType"
                      values={Object {}}
                    />
                  }
                  name="filterType"
                  onSelect={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "checkbox",
                        "value": "checkbox",
                      },
                    ]
                  }
                  value=""
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": true,
                            "lastClassName": "bvPMDH",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
  padding-bottom: 30px;
  position: relative;

  label {
    margin-bottom: 1px;
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bxivhb bvPMDH"
                      >
                        <Component
                          id="fieldProjectStatusLabel"
                        >
                          <LabelComponent
                            customStyles={Object {}}
                            id="fieldProjectStatusLabel"
                          >
                            <label
                              id="fieldProjectStatusLabel"
                              style={
                                Object {
                                  "border": "none",
                                  "borderTop": "1px solid #2F2F36",
                                  "color": "#71737e",
                                  "display": "block",
                                  "fontSize": "14px",
                                  "outline": "none",
                                  "paddingTop": "8px",
                                  "width": "100%",
                                }
                              }
                            >
                              <FormattedMessage
                                defaultMessage="Filter Type"
                                id="shared.components.filter.filterType"
                                values={Object {}}
                              >
                                <span>
                                  Filter Type
                                </span>
                              </FormattedMessage>
                            </label>
                          </LabelComponent>
                        </Component>
                        <input
                          id="filterType"
                          name="filterType"
                          type="hidden"
                          value=""
                        />
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "bmDYeY",
                                  "rules": Array [
                                    "
  position: absolute;
  right: 0;
  top: 5px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-ifAKCX bmDYeY"
                            >
                              <Component>
                                <EditIconComponent>
                                  <SvgEdit
                                    style={
                                      Object {
                                        "fill": "#FFF",
                                        "height": "30px",
                                        "width": "30px",
                                      }
                                    }
                                  >
                                    <svg
                                      style={
                                        Object {
                                          "fill": "#FFF",
                                          "height": "30px",
                                          "width": "30px",
                                        }
                                      }
                                      viewBox="0 0 30 30"
                                    >
                                      <path
                                        d="M21.789 10.92a.724.724 0 000-1.022l-1.687-1.687a.724.724 0 00-1.022 0l-1.322 1.322 2.709 2.709 1.322-1.322zM9 18.291V21h2.709l7.992-7.992-2.709-2.71L9 18.292z"
                                        fillRule="evenodd"
                                      />
                                    </svg>
                                  </SvgEdit>
                                </EditIconComponent>
                              </Component>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <Component
                          onSelect={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "checkbox",
                                "selected": false,
                                "value": "checkbox",
                              },
                            ]
                          }
                        >
                          <SelectComponent
                            native={false}
                            onSelect={[Function]}
                            options={
                              Array [
                                Object {
                                  "label": "checkbox",
                                  "selected": false,
                                  "value": "checkbox",
                                },
                              ]
                            }
                          >
                            <div
                              style={
                                Object {
                                  "color": "#FFF",
                                  "display": "flex",
                                  "width": "100%",
                                }
                              }
                            >
                              <div
                                style={
                                  Object {
                                    "cursor": "pointer",
                                    "display": "flex",
                                    "position": "relative",
                                    "width": "100%",
                                  }
                                }
                              >
                                <div
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "cursor": "pointer",
                                      "display": "flex",
                                      "height": "30px",
                                      "width": "100%",
                                    }
                                  }
                                >
                                  <div
                                    style={
                                      Object {
                                        "alignItems": "center",
                                        "cursor": "pointer",
                                        "display": "flex",
                                        "height": "30px",
                                      }
                                    }
                                  >
                                    checkbox
                                  </div>
                                </div>
                                <div
                                  style={
                                    Object {
                                      "backgroundColor": "#1d1d20",
                                      "display": "none",
                                      "flexDirection": "column",
                                      "left": "0",
                                      "maxHeight": "175px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "top": "46px",
                                      "width": "100%",
                                      "zIndex": 2,
                                    }
                                  }
                                >
                                  <div
                                    id="select-item-0"
                                    key="0"
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "borderTop": "none",
                                        "cursor": "pointer",
                                        "display": "flex",
                                        "padding": "7px",
                                      }
                                    }
                                  >
                                    checkbox
                                  </div>
                                </div>
                              </div>
                            </div>
                          </SelectComponent>
                        </Component>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </Select>
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-EHOje",
                          "isStatic": true,
                          "lastClassName": "bxDIJE",
                          "rules": Array [
                            "
  display: grid;
  grid-gap: 20px;
  grid-template-columns: auto auto;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-EHOje",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-EHOje bxDIJE"
                    >
                      <TextInput
                        checkOnlyErrors={false}
                        disabled={true}
                        errors={Object {}}
                        fullWidth={true}
                        handleBlur={[Function]}
                        handleReset={[Function]}
                        handleSubmit={[Function]}
                        initialValues={
                          Object {
                            "field": "field",
                            "fieldType": "string",
                            "filterType": "",
                            "name": "",
                            "unique": "1",
                          }
                        }
                        isEdit={false}
                        isSubmitting={false}
                        isValidating={false}
                        label={
                          <FormattedMessage
                            defaultMessage="Field Type"
                            id="shared.components.filter.fieldType"
                            values={Object {}}
                          />
                        }
                        name="fieldType"
                        onChange={[Function]}
                        registerField={[Function]}
                        resetForm={[Function]}
                        setError={[Function]}
                        setErrors={[Function]}
                        setFieldError={[Function]}
                        setFieldTouched={[Function]}
                        setFormikState={[Function]}
                        setStatus={[Function]}
                        setSubmitting={[Function]}
                        setTouched={[Function]}
                        setValues={[Function]}
                        submitCount={0}
                        submitForm={[Function]}
                        touched={Object {}}
                        unregisterField={[Function]}
                        validateField={[Function]}
                        validateForm={[Function]}
                        validateOnBlur={true}
                        validateOnChange={true}
                        value="string"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "bDWFJH",
                                  "rules": Array [],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-bdVaJa bDWFJH"
                            >
                              <Component
                                disabled={true}
                                error={false}
                                fullWidth={true}
                                iconComponent={null}
                                label={
                                  <FormattedMessage
                                    defaultMessage="Field Type"
                                    id="shared.components.filter.fieldType"
                                    values={Object {}}
                                  />
                                }
                                name="fieldType"
                                onChange={[Function]}
                                value="string"
                              >
                                <TextFieldComponent
                                  customInputStyles={Object {}}
                                  customLabelStyles={Object {}}
                                  disabled={true}
                                  error={false}
                                  fullWidth={true}
                                  iconComponent={null}
                                  label={
                                    <FormattedMessage
                                      defaultMessage="Field Type"
                                      id="shared.components.filter.fieldType"
                                      values={Object {}}
                                    />
                                  }
                                  name="fieldType"
                                  onChange={[Function]}
                                  type="text"
                                  value="string"
                                >
                                  <div
                                    style={
                                      Object {
                                        "display": "flex",
                                        "flexDirection": "column",
                                        "maxWidth": "100%",
                                        "paddingBottom": "30px",
                                        "position": "relative",
                                      }
                                    }
                                  >
                                    <Component
                                      customStyles={Object {}}
                                      name="fieldType"
                                    >
                                      <LabelComponent
                                        customStyles={Object {}}
                                        name="fieldType"
                                      >
                                        <label
                                          htmlFor="fieldType"
                                          style={
                                            Object {
                                              "border": "none",
                                              "borderTop": "1px solid #2F2F36",
                                              "color": "#71737e",
                                              "display": "block",
                                              "fontSize": "14px",
                                              "outline": "none",
                                              "paddingTop": "8px",
                                              "width": "100%",
                                            }
                                          }
                                        >
                                          <FormattedMessage
                                            defaultMessage="Field Type"
                                            id="shared.components.filter.fieldType"
                                            values={Object {}}
                                          >
                                            <span>
                                              Field Type
                                            </span>
                                          </FormattedMessage>
                                        </label>
                                      </LabelComponent>
                                    </Component>
                                    <Component
                                      customStyles={Object {}}
                                      disabled={true}
                                      name="fieldType"
                                      onChange={[Function]}
                                      type="text"
                                      value="string"
                                    >
                                      <InputComponent
                                        customStyles={Object {}}
                                        disabled={true}
                                        name="fieldType"
                                        onChange={[Function]}
                                        type="text"
                                        value="string"
                                      >
                                        <input
                                          disabled={true}
                                          id="fieldType"
                                          name="fieldType"
                                          onChange={[Function]}
                                          style={
                                            Object {
                                              "backgroundColor": "transparent",
                                              "border": "none",
                                              "color": "#FFF",
                                              "fontSize": "18px",
                                              "lineHeight": "24px",
                                              "outline": "none",
                                            }
                                          }
                                          type="text"
                                          value="string"
                                        />
                                      </InputComponent>
                                    </Component>
                                    <div
                                      style={
                                        Object {
                                          "position": "absolute",
                                          "right": 0,
                                          "top": 0,
                                        }
                                      }
                                    />
                                  </div>
                                </TextFieldComponent>
                              </Component>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TextInput>
                      <TextInput
                        checkOnlyErrors={false}
                        disabled={true}
                        errors={Object {}}
                        fullWidth={true}
                        handleBlur={[Function]}
                        handleReset={[Function]}
                        handleSubmit={[Function]}
                        initialValues={
                          Object {
                            "field": "field",
                            "fieldType": "string",
                            "filterType": "",
                            "name": "",
                            "unique": "1",
                          }
                        }
                        isEdit={false}
                        isSubmitting={false}
                        isValidating={false}
                        label={
                          <FormattedMessage
                            defaultMessage="Unique items"
                            id="shared.components.filter.unique"
                            values={Object {}}
                          />
                        }
                        name="unique"
                        onChange={[Function]}
                        registerField={[Function]}
                        resetForm={[Function]}
                        setError={[Function]}
                        setErrors={[Function]}
                        setFieldError={[Function]}
                        setFieldTouched={[Function]}
                        setFormikState={[Function]}
                        setStatus={[Function]}
                        setSubmitting={[Function]}
                        setTouched={[Function]}
                        setValues={[Function]}
                        submitCount={0}
                        submitForm={[Function]}
                        touched={Object {}}
                        unregisterField={[Function]}
                        validateField={[Function]}
                        validateForm={[Function]}
                        validateOnBlur={true}
                        validateOnChange={true}
                        value="1"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "bDWFJH",
                                  "rules": Array [],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-bdVaJa bDWFJH"
                            >
                              <Component
                                disabled={true}
                                error={false}
                                fullWidth={true}
                                iconComponent={null}
                                label={
                                  <FormattedMessage
                                    defaultMessage="Unique items"
                                    id="shared.components.filter.unique"
                                    values={Object {}}
                                  />
                                }
                                name="unique"
                                onChange={[Function]}
                                value="1"
                              >
                                <TextFieldComponent
                                  customInputStyles={Object {}}
                                  customLabelStyles={Object {}}
                                  disabled={true}
                                  error={false}
                                  fullWidth={true}
                                  iconComponent={null}
                                  label={
                                    <FormattedMessage
                                      defaultMessage="Unique items"
                                      id="shared.components.filter.unique"
                                      values={Object {}}
                                    />
                                  }
                                  name="unique"
                                  onChange={[Function]}
                                  type="text"
                                  value="1"
                                >
                                  <div
                                    style={
                                      Object {
                                        "display": "flex",
                                        "flexDirection": "column",
                                        "maxWidth": "100%",
                                        "paddingBottom": "30px",
                                        "position": "relative",
                                      }
                                    }
                                  >
                                    <Component
                                      customStyles={Object {}}
                                      name="unique"
                                    >
                                      <LabelComponent
                                        customStyles={Object {}}
                                        name="unique"
                                      >
                                        <label
                                          htmlFor="unique"
                                          style={
                                            Object {
                                              "border": "none",
                                              "borderTop": "1px solid #2F2F36",
                                              "color": "#71737e",
                                              "display": "block",
                                              "fontSize": "14px",
                                              "outline": "none",
                                              "paddingTop": "8px",
                                              "width": "100%",
                                            }
                                          }
                                        >
                                          <FormattedMessage
                                            defaultMessage="Unique items"
                                            id="shared.components.filter.unique"
                                            values={Object {}}
                                          >
                                            <span>
                                              Unique items
                                            </span>
                                          </FormattedMessage>
                                        </label>
                                      </LabelComponent>
                                    </Component>
                                    <Component
                                      customStyles={Object {}}
                                      disabled={true}
                                      name="unique"
                                      onChange={[Function]}
                                      type="text"
                                      value="1"
                                    >
                                      <InputComponent
                                        customStyles={Object {}}
                                        disabled={true}
                                        name="unique"
                                        onChange={[Function]}
                                        type="text"
                                        value="1"
                                      >
                                        <input
                                          disabled={true}
                                          id="unique"
                                          name="unique"
                                          onChange={[Function]}
                                          style={
                                            Object {
                                              "backgroundColor": "transparent",
                                              "border": "none",
                                              "color": "#FFF",
                                              "fontSize": "18px",
                                              "lineHeight": "24px",
                                              "outline": "none",
                                            }
                                          }
                                          type="text"
                                          value="1"
                                        />
                                      </InputComponent>
                                    </Component>
                                    <div
                                      style={
                                        Object {
                                          "position": "absolute",
                                          "right": 0,
                                          "top": 0,
                                        }
                                      }
                                    />
                                  </div>
                                </TextFieldComponent>
                              </Component>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TextInput>
                    </div>
                  </StyledComponent>
                </styled.div>
                <NavigationContainer
                  right={false}
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gzVnrw",
                            "isStatic": true,
                            "lastClassName": "bvWFXB",
                            "rules": Array [
                              "
  height: 155px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gzVnrw",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-gzVnrw bvWFXB"
                      >
                        <styled.div
                          right={false}
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-htoDjs",
                                  "isStatic": false,
                                  "lastClassName": "eZUylk",
                                  "rules": Array [
                                    "
  position: fixed;
  padding: 40px 0 36px;
  bottom: 0;
  width: calc(100% - 40px);
  background-image: linear-gradient(
    to top,
    ",
                                    [Function],
                                    ",
    rgba(0, 0, 0, 0)
  );
  display: flex;
  justify-content: ",
                                    [Function],
                                    ";
  flex-wrap: wrap;
  align-items: center;

  ",
                                    "
    @media (min-width: ",
                                    "1040",
                                    "px) {
      ",
                                    "
    width: ",
                                    "1000",
                                    "px;
  ",
                                    "
    }
  ",
                                    "
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-htoDjs",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            right={false}
                          >
                            <div
                              className="sc-htoDjs eZUylk"
                            >
                              <BackButton
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                              >
                                <Component
                                  customStyles={
                                    Object {
                                      "marginRight": 5,
                                      "width": "calc(50% - 5px)",
                                    }
                                  }
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <ButtonComponent
                                    customStyles={
                                      Object {
                                        "marginRight": 5,
                                        "width": "calc(50% - 5px)",
                                      }
                                    }
                                    disabled={false}
                                    inverse={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      disabled={false}
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "backgroundColor": "#1d1d20",
                                          "border": "none",
                                          "borderRadius": "48px",
                                          "color": "#FFF",
                                          "cursor": "pointer",
                                          "display": "inline-block",
                                          "fill": "#FFF",
                                          "fontSize": "18px",
                                          "margin": "0",
                                          "marginRight": 5,
                                          "minHeight": "48px",
                                          "outline": "none",
                                          "padding": "0",
                                          "width": "calc(50% - 5px)",
                                        }
                                      }
                                      type="button"
                                    >
                                      <FormattedMessage
                                        defaultMessage="Cancel"
                                        id="shared.components.filter.cancel"
                                        values={Object {}}
                                      >
                                        <span>
                                          Cancel
                                        </span>
                                      </FormattedMessage>
                                    </button>
                                  </ButtonComponent>
                                </Component>
                              </BackButton>
                              <NextButton
                                disabled={true}
                                loading={false}
                                type="submit"
                              >
                                <Component
                                  customStyles={
                                    Object {
                                      "marginLeft": 5,
                                      "width": "calc(50% - 5px)",
                                    }
                                  }
                                  disabled={true}
                                  inverse={true}
                                  type="submit"
                                >
                                  <ButtonComponent
                                    customStyles={
                                      Object {
                                        "marginLeft": 5,
                                        "width": "calc(50% - 5px)",
                                      }
                                    }
                                    disabled={true}
                                    inverse={true}
                                    type="submit"
                                  >
                                    <button
                                      disabled={true}
                                      style={
                                        Object {
                                          "backgroundColor": "#1d1d20",
                                          "border": "none",
                                          "borderRadius": "48px",
                                          "color": "#71737e",
                                          "cursor": "default",
                                          "display": "inline-block",
                                          "fill": "#FFF",
                                          "fontSize": "18px",
                                          "margin": "0",
                                          "marginLeft": 5,
                                          "minHeight": "48px",
                                          "outline": "none",
                                          "padding": "0",
                                          "width": "calc(50% - 5px)",
                                        }
                                      }
                                      type="submit"
                                    >
                                      <FormattedMessage
                                        defaultMessage="Save"
                                        id="shared.components.filter.saveFilter"
                                        values={Object {}}
                                      >
                                        <span>
                                          Save
                                        </span>
                                      </FormattedMessage>
                                    </button>
                                  </ButtonComponent>
                                </Component>
                              </NextButton>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </NavigationContainer>
              </form>
            </Component>
          </Form>
        </StyledComponent>
      </Styled(Form)>
    </Formik>
    <Modal
      ariaHideApp={true}
      bodyOpenClassName="ReactModal__Body--open"
      closeTimeoutMS={0}
      contentLabel="Confirm Removal"
      isOpen={false}
      parentSelector={[Function]}
      portalClassName="ReactModalPortal"
      role="dialog"
      shouldCloseOnEsc={true}
      shouldCloseOnOverlayClick={true}
      shouldFocusAfterRender={true}
      shouldReturnFocusAfterClose={true}
      style={
        Object {
          "content": Object {
            "WebkitOverflowScrolling": "touch",
            "alignItems": "center",
            "backgroundColor": "rgba(0, 0, 0, 0.9)",
            "border": "1px solid #ccc",
            "borderRadius": "4px",
            "bottom": "40px",
            "color": "FFFFFF",
            "display": "flex",
            "left": "40px",
            "outline": "none",
            "overflow": "auto",
            "padding": "20px",
            "position": "absolute",
            "right": "40px",
            "top": "40px",
          },
          "overlay": Object {
            "backgroundColor": "rgba(0, 0, 0, 0.5)",
            "bottom": 0,
            "left": 0,
            "position": "fixed",
            "right": 0,
            "top": 0,
            "zIndex": 10000,
          },
        }
      }
    >
      <Portal
        containerInfo={
          <div
            class="ReactModalPortal"
          />
        }
      >
        <ModalPortal
          ariaHideApp={true}
          bodyOpenClassName="ReactModal__Body--open"
          closeTimeoutMS={0}
          contentLabel="Confirm Removal"
          defaultStyles={
            Object {
              "content": Object {
                "WebkitOverflowScrolling": "touch",
                "background": "#fff",
                "border": "1px solid #ccc",
                "borderRadius": "4px",
                "bottom": "40px",
                "left": "40px",
                "outline": "none",
                "overflow": "auto",
                "padding": "20px",
                "position": "absolute",
                "right": "40px",
                "top": "40px",
              },
              "overlay": Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
              },
            }
          }
          isOpen={false}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          role="dialog"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "content": Object {
                "WebkitOverflowScrolling": "touch",
                "alignItems": "center",
                "backgroundColor": "rgba(0, 0, 0, 0.9)",
                "border": "1px solid #ccc",
                "borderRadius": "4px",
                "bottom": "40px",
                "color": "FFFFFF",
                "display": "flex",
                "left": "40px",
                "outline": "none",
                "overflow": "auto",
                "padding": "20px",
                "position": "absolute",
                "right": "40px",
                "top": "40px",
              },
              "overlay": Object {
                "backgroundColor": "rgba(0, 0, 0, 0.5)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
                "zIndex": 10000,
              },
            }
          }
        />
      </Portal>
    </Modal>
  </FilterForm>
</IntlProvider>
`;

exports[`FilterForm: Component should render edit form 1`] = `
<IntlProvider
  locale="en"
>
  <FilterForm
    fieldsInfo={
      Object {
        "field": Object {
          "fieldType": "string",
          "filterType": Array [
            "checkbox",
          ],
          "unique": 1,
        },
      }
    }
    filter={
      Object {
        "field": "field",
        "fieldType": "fieldType",
        "filterType": "filterType",
        "name": "name",
        "unique": "unique",
      }
    }
    removeFilter={[Function]}
    updateFilter={[Function]}
  >
    <Formik
      enableReinitialize={false}
      initialValues={
        Object {
          "field": "field",
          "fieldType": "string",
          "filterType": "filterType",
          "name": "name",
          "unique": "1",
        }
      }
      isInitialValid={false}
      onSubmit={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
      validationSchema={
        ObjectSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_defaultDefault": [Function],
          "_deps": Array [],
          "_excludedEdges": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_nodes": Array [
            "name",
          ],
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "object",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "fields": Object {
            "name": StringSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "max": true,
                "min": true,
                "required": true,
              },
              "_mutate": undefined,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "tests": Array [
                [Function],
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        }
      }
    >
      <Styled(Form)>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "WrappedComponent": [Function],
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bZQynM",
                "isStatic": true,
                "lastClassName": "UzdGw",
                "rules": Array [
                  "
  padding-top: 24px;
",
                ],
              },
              "displayName": "Styled(Form)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bZQynM",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <Form
            className="sc-bZQynM UzdGw"
          >
            <Component
              className="sc-bZQynM UzdGw"
              formik={
                Object {
                  "dirty": false,
                  "errors": Object {},
                  "handleBlur": [Function],
                  "handleChange": [Function],
                  "handleReset": [Function],
                  "handleSubmit": [Function],
                  "initialValues": Object {
                    "field": "field",
                    "fieldType": "string",
                    "filterType": "filterType",
                    "name": "name",
                    "unique": "1",
                  },
                  "isSubmitting": false,
                  "isValid": false,
                  "isValidating": false,
                  "registerField": [Function],
                  "resetForm": [Function],
                  "setError": [Function],
                  "setErrors": [Function],
                  "setFieldError": [Function],
                  "setFieldTouched": [Function],
                  "setFieldValue": [Function],
                  "setFormikState": [Function],
                  "setStatus": [Function],
                  "setSubmitting": [Function],
                  "setTouched": [Function],
                  "setValues": [Function],
                  "status": undefined,
                  "submitCount": 0,
                  "submitForm": [Function],
                  "touched": Object {},
                  "unregisterField": [Function],
                  "validate": undefined,
                  "validateField": [Function],
                  "validateForm": [Function],
                  "validateOnBlur": true,
                  "validateOnChange": true,
                  "validationSchema": ObjectSchema {
                    "_blacklist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_conditions": Array [],
                    "_defaultDefault": [Function],
                    "_deps": Array [],
                    "_excludedEdges": Array [],
                    "_exclusive": Object {},
                    "_mutate": undefined,
                    "_nodes": Array [
                      "name",
                    ],
                    "_options": Object {
                      "abortEarly": true,
                      "recursive": true,
                    },
                    "_type": "object",
                    "_typeError": [Function],
                    "_whitelist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "fields": Object {
                      "name": StringSchema {
                        "_blacklist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "_conditions": Array [],
                        "_deps": Array [],
                        "_exclusive": Object {
                          "max": true,
                          "min": true,
                          "required": true,
                        },
                        "_mutate": undefined,
                        "_options": Object {
                          "abortEarly": true,
                          "recursive": true,
                        },
                        "_type": "string",
                        "_typeError": [Function],
                        "_whitelist": RefSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "tests": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                        "transforms": Array [
                          [Function],
                        ],
                      },
                    },
                    "tests": Array [],
                    "transforms": Array [
                      [Function],
                    ],
                  },
                  "values": Object {
                    "field": "field",
                    "fieldType": "string",
                    "filterType": "filterType",
                    "name": "name",
                    "unique": "1",
                  },
                }
              }
            >
              <form
                className="sc-bZQynM UzdGw"
                onReset={[Function]}
                onSubmit={[Function]}
              >
                <TextInput
                  checkOnlyErrors={false}
                  errors={Object {}}
                  fullWidth={true}
                  handleBlur={[Function]}
                  handleReset={[Function]}
                  handleSubmit={[Function]}
                  initialValues={
                    Object {
                      "field": "field",
                      "fieldType": "string",
                      "filterType": "filterType",
                      "name": "name",
                      "unique": "1",
                    }
                  }
                  isEdit={true}
                  isSubmitting={false}
                  isValidating={false}
                  label={
                    <FormattedMessage
                      defaultMessage="Filter Name"
                      id="shared.components.filter.name"
                      values={Object {}}
                    />
                  }
                  name="name"
                  onChange={[Function]}
                  registerField={[Function]}
                  resetForm={[Function]}
                  setError={[Function]}
                  setErrors={[Function]}
                  setFieldError={[Function]}
                  setFieldTouched={[Function]}
                  setFormikState={[Function]}
                  setStatus={[Function]}
                  setSubmitting={[Function]}
                  setTouched={[Function]}
                  setValues={[Function]}
                  submitCount={0}
                  submitForm={[Function]}
                  touched={Object {}}
                  unregisterField={[Function]}
                  validateField={[Function]}
                  validateForm={[Function]}
                  validateOnBlur={true}
                  validateOnChange={true}
                  value="name"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bdVaJa",
                            "isStatic": true,
                            "lastClassName": "bDWFJH",
                            "rules": Array [],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bdVaJa",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bdVaJa bDWFJH"
                      >
                        <Component
                          error={false}
                          fullWidth={true}
                          iconComponent={
                            <ForwardRef(styled.div)>
                              <Unknown />
                            </ForwardRef(styled.div)>
                          }
                          label={
                            <FormattedMessage
                              defaultMessage="Filter Name"
                              id="shared.components.filter.name"
                              values={Object {}}
                            />
                          }
                          name="name"
                          onChange={[Function]}
                          value="name"
                        >
                          <TextFieldComponent
                            customInputStyles={Object {}}
                            customLabelStyles={Object {}}
                            error={false}
                            fullWidth={true}
                            iconComponent={
                              <ForwardRef(styled.div)>
                                <Unknown />
                              </ForwardRef(styled.div)>
                            }
                            label={
                              <FormattedMessage
                                defaultMessage="Filter Name"
                                id="shared.components.filter.name"
                                values={Object {}}
                              />
                            }
                            name="name"
                            onChange={[Function]}
                            type="text"
                            value="name"
                          >
                            <div
                              style={
                                Object {
                                  "display": "flex",
                                  "flexDirection": "column",
                                  "maxWidth": "100%",
                                  "paddingBottom": "30px",
                                  "position": "relative",
                                }
                              }
                            >
                              <Component
                                customStyles={Object {}}
                                name="name"
                              >
                                <LabelComponent
                                  customStyles={Object {}}
                                  name="name"
                                >
                                  <label
                                    htmlFor="name"
                                    style={
                                      Object {
                                        "border": "none",
                                        "borderTop": "1px solid #2F2F36",
                                        "color": "#71737e",
                                        "display": "block",
                                        "fontSize": "14px",
                                        "outline": "none",
                                        "paddingTop": "8px",
                                        "width": "100%",
                                      }
                                    }
                                  >
                                    <FormattedMessage
                                      defaultMessage="Filter Name"
                                      id="shared.components.filter.name"
                                      values={Object {}}
                                    >
                                      <span>
                                        Filter Name
                                      </span>
                                    </FormattedMessage>
                                  </label>
                                </LabelComponent>
                              </Component>
                              <Component
                                customStyles={Object {}}
                                name="name"
                                onChange={[Function]}
                                type="text"
                                value="name"
                              >
                                <InputComponent
                                  customStyles={Object {}}
                                  name="name"
                                  onChange={[Function]}
                                  type="text"
                                  value="name"
                                >
                                  <input
                                    id="name"
                                    name="name"
                                    onChange={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "none",
                                        "color": "#FFF",
                                        "fontSize": "18px",
                                        "lineHeight": "24px",
                                        "outline": "none",
                                      }
                                    }
                                    type="text"
                                    value="name"
                                  />
                                </InputComponent>
                              </Component>
                              <div
                                style={
                                  Object {
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  }
                                }
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bwzfXH",
                                          "isStatic": true,
                                          "lastClassName": "gLRQcl",
                                          "rules": Array [
                                            "
  padding-top: 7px;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bwzfXH",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bwzfXH gLRQcl"
                                    >
                                      <Component>
                                        <EditIconComponent>
                                          <SvgEdit
                                            style={
                                              Object {
                                                "fill": "#FFF",
                                                "height": "30px",
                                                "width": "30px",
                                              }
                                            }
                                          >
                                            <svg
                                              style={
                                                Object {
                                                  "fill": "#FFF",
                                                  "height": "30px",
                                                  "width": "30px",
                                                }
                                              }
                                              viewBox="0 0 30 30"
                                            >
                                              <path
                                                d="M21.789 10.92a.724.724 0 000-1.022l-1.687-1.687a.724.724 0 00-1.022 0l-1.322 1.322 2.709 2.709 1.322-1.322zM9 18.291V21h2.709l7.992-7.992-2.709-2.71L9 18.292z"
                                                fillRule="evenodd"
                                              />
                                            </svg>
                                          </SvgEdit>
                                        </EditIconComponent>
                                      </Component>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </div>
                          </TextFieldComponent>
                        </Component>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </TextInput>
                <Select
                  label={
                    <FormattedMessage
                      defaultMessage="Field"
                      id="shared.components.filter.field"
                      values={Object {}}
                    />
                  }
                  name="field"
                  onSelect={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "field",
                        "value": "field",
                      },
                    ]
                  }
                  value="field"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": true,
                            "lastClassName": "bvPMDH",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
  padding-bottom: 30px;
  position: relative;

  label {
    margin-bottom: 1px;
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bxivhb bvPMDH"
                      >
                        <Component
                          id="fieldProjectStatusLabel"
                        >
                          <LabelComponent
                            customStyles={Object {}}
                            id="fieldProjectStatusLabel"
                          >
                            <label
                              id="fieldProjectStatusLabel"
                              style={
                                Object {
                                  "border": "none",
                                  "borderTop": "1px solid #2F2F36",
                                  "color": "#71737e",
                                  "display": "block",
                                  "fontSize": "14px",
                                  "outline": "none",
                                  "paddingTop": "8px",
                                  "width": "100%",
                                }
                              }
                            >
                              <FormattedMessage
                                defaultMessage="Field"
                                id="shared.components.filter.field"
                                values={Object {}}
                              >
                                <span>
                                  Field
                                </span>
                              </FormattedMessage>
                            </label>
                          </LabelComponent>
                        </Component>
                        <input
                          id="field"
                          name="field"
                          type="hidden"
                          value="field"
                        />
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "bmDYeY",
                                  "rules": Array [
                                    "
  position: absolute;
  right: 0;
  top: 5px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-ifAKCX bmDYeY"
                            >
                              <Component>
                                <EditIconComponent>
                                  <SvgEdit
                                    style={
                                      Object {
                                        "fill": "#FFF",
                                        "height": "30px",
                                        "width": "30px",
                                      }
                                    }
                                  >
                                    <svg
                                      style={
                                        Object {
                                          "fill": "#FFF",
                                          "height": "30px",
                                          "width": "30px",
                                        }
                                      }
                                      viewBox="0 0 30 30"
                                    >
                                      <path
                                        d="M21.789 10.92a.724.724 0 000-1.022l-1.687-1.687a.724.724 0 00-1.022 0l-1.322 1.322 2.709 2.709 1.322-1.322zM9 18.291V21h2.709l7.992-7.992-2.709-2.71L9 18.292z"
                                        fillRule="evenodd"
                                      />
                                    </svg>
                                  </SvgEdit>
                                </EditIconComponent>
                              </Component>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <Component
                          onSelect={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "field",
                                "selected": true,
                                "value": "field",
                              },
                            ]
                          }
                        >
                          <SelectComponent
                            native={false}
                            onSelect={[Function]}
                            options={
                              Array [
                                Object {
                                  "label": "field",
                                  "selected": true,
                                  "value": "field",
                                },
                              ]
                            }
                          >
                            <div
                              style={
                                Object {
                                  "color": "#FFF",
                                  "display": "flex",
                                  "width": "100%",
                                }
                              }
                            >
                              <div
                                style={
                                  Object {
                                    "cursor": "pointer",
                                    "display": "flex",
                                    "position": "relative",
                                    "width": "100%",
                                  }
                                }
                              >
                                <div
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "cursor": "pointer",
                                      "display": "flex",
                                      "height": "30px",
                                      "width": "100%",
                                    }
                                  }
                                >
                                  <div
                                    style={
                                      Object {
                                        "alignItems": "center",
                                        "cursor": "pointer",
                                        "display": "flex",
                                        "height": "30px",
                                      }
                                    }
                                  >
                                    field
                                  </div>
                                </div>
                                <div
                                  style={
                                    Object {
                                      "backgroundColor": "#1d1d20",
                                      "display": "none",
                                      "flexDirection": "column",
                                      "left": "0",
                                      "maxHeight": "175px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "top": "46px",
                                      "width": "100%",
                                      "zIndex": 2,
                                    }
                                  }
                                >
                                  <div
                                    id="select-item-0"
                                    key="0"
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "borderTop": "none",
                                        "cursor": "pointer",
                                        "display": "flex",
                                        "padding": "7px",
                                      }
                                    }
                                  >
                                    field
                                  </div>
                                </div>
                              </div>
                            </div>
                          </SelectComponent>
                        </Component>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </Select>
                <Select
                  label={
                    <FormattedMessage
                      defaultMessage="Filter Type"
                      id="shared.components.filter.filterType"
                      values={Object {}}
                    />
                  }
                  name="filterType"
                  onSelect={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "checkbox",
                        "value": "checkbox",
                      },
                    ]
                  }
                  value="filterType"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": true,
                            "lastClassName": "bvPMDH",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
  padding-bottom: 30px;
  position: relative;

  label {
    margin-bottom: 1px;
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bxivhb bvPMDH"
                      >
                        <Component
                          id="fieldProjectStatusLabel"
                        >
                          <LabelComponent
                            customStyles={Object {}}
                            id="fieldProjectStatusLabel"
                          >
                            <label
                              id="fieldProjectStatusLabel"
                              style={
                                Object {
                                  "border": "none",
                                  "borderTop": "1px solid #2F2F36",
                                  "color": "#71737e",
                                  "display": "block",
                                  "fontSize": "14px",
                                  "outline": "none",
                                  "paddingTop": "8px",
                                  "width": "100%",
                                }
                              }
                            >
                              <FormattedMessage
                                defaultMessage="Filter Type"
                                id="shared.components.filter.filterType"
                                values={Object {}}
                              >
                                <span>
                                  Filter Type
                                </span>
                              </FormattedMessage>
                            </label>
                          </LabelComponent>
                        </Component>
                        <input
                          id="filterType"
                          name="filterType"
                          type="hidden"
                          value="filterType"
                        />
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "bmDYeY",
                                  "rules": Array [
                                    "
  position: absolute;
  right: 0;
  top: 5px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-ifAKCX bmDYeY"
                            >
                              <Component>
                                <EditIconComponent>
                                  <SvgEdit
                                    style={
                                      Object {
                                        "fill": "#FFF",
                                        "height": "30px",
                                        "width": "30px",
                                      }
                                    }
                                  >
                                    <svg
                                      style={
                                        Object {
                                          "fill": "#FFF",
                                          "height": "30px",
                                          "width": "30px",
                                        }
                                      }
                                      viewBox="0 0 30 30"
                                    >
                                      <path
                                        d="M21.789 10.92a.724.724 0 000-1.022l-1.687-1.687a.724.724 0 00-1.022 0l-1.322 1.322 2.709 2.709 1.322-1.322zM9 18.291V21h2.709l7.992-7.992-2.709-2.71L9 18.292z"
                                        fillRule="evenodd"
                                      />
                                    </svg>
                                  </SvgEdit>
                                </EditIconComponent>
                              </Component>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <Component
                          onSelect={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "checkbox",
                                "selected": false,
                                "value": "checkbox",
                              },
                            ]
                          }
                        >
                          <SelectComponent
                            native={false}
                            onSelect={[Function]}
                            options={
                              Array [
                                Object {
                                  "label": "checkbox",
                                  "selected": false,
                                  "value": "checkbox",
                                },
                              ]
                            }
                          >
                            <div
                              style={
                                Object {
                                  "color": "#FFF",
                                  "display": "flex",
                                  "width": "100%",
                                }
                              }
                            >
                              <div
                                style={
                                  Object {
                                    "cursor": "pointer",
                                    "display": "flex",
                                    "position": "relative",
                                    "width": "100%",
                                  }
                                }
                              >
                                <div
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "cursor": "pointer",
                                      "display": "flex",
                                      "height": "30px",
                                      "width": "100%",
                                    }
                                  }
                                >
                                  <div
                                    style={
                                      Object {
                                        "alignItems": "center",
                                        "cursor": "pointer",
                                        "display": "flex",
                                        "height": "30px",
                                      }
                                    }
                                  >
                                    checkbox
                                  </div>
                                </div>
                                <div
                                  style={
                                    Object {
                                      "backgroundColor": "#1d1d20",
                                      "display": "none",
                                      "flexDirection": "column",
                                      "left": "0",
                                      "maxHeight": "175px",
                                      "overflow": "hidden",
                                      "position": "absolute",
                                      "top": "46px",
                                      "width": "100%",
                                      "zIndex": 2,
                                    }
                                  }
                                >
                                  <div
                                    id="select-item-0"
                                    key="0"
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "borderTop": "none",
                                        "cursor": "pointer",
                                        "display": "flex",
                                        "padding": "7px",
                                      }
                                    }
                                  >
                                    checkbox
                                  </div>
                                </div>
                              </div>
                            </div>
                          </SelectComponent>
                        </Component>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </Select>
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-EHOje",
                          "isStatic": true,
                          "lastClassName": "bxDIJE",
                          "rules": Array [
                            "
  display: grid;
  grid-gap: 20px;
  grid-template-columns: auto auto;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-EHOje",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-EHOje bxDIJE"
                    >
                      <TextInput
                        checkOnlyErrors={false}
                        disabled={true}
                        errors={Object {}}
                        fullWidth={true}
                        handleBlur={[Function]}
                        handleReset={[Function]}
                        handleSubmit={[Function]}
                        initialValues={
                          Object {
                            "field": "field",
                            "fieldType": "string",
                            "filterType": "filterType",
                            "name": "name",
                            "unique": "1",
                          }
                        }
                        isEdit={false}
                        isSubmitting={false}
                        isValidating={false}
                        label={
                          <FormattedMessage
                            defaultMessage="Field Type"
                            id="shared.components.filter.fieldType"
                            values={Object {}}
                          />
                        }
                        name="fieldType"
                        onChange={[Function]}
                        registerField={[Function]}
                        resetForm={[Function]}
                        setError={[Function]}
                        setErrors={[Function]}
                        setFieldError={[Function]}
                        setFieldTouched={[Function]}
                        setFormikState={[Function]}
                        setStatus={[Function]}
                        setSubmitting={[Function]}
                        setTouched={[Function]}
                        setValues={[Function]}
                        submitCount={0}
                        submitForm={[Function]}
                        touched={Object {}}
                        unregisterField={[Function]}
                        validateField={[Function]}
                        validateForm={[Function]}
                        validateOnBlur={true}
                        validateOnChange={true}
                        value="string"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "bDWFJH",
                                  "rules": Array [],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-bdVaJa bDWFJH"
                            >
                              <Component
                                disabled={true}
                                error={false}
                                fullWidth={true}
                                iconComponent={null}
                                label={
                                  <FormattedMessage
                                    defaultMessage="Field Type"
                                    id="shared.components.filter.fieldType"
                                    values={Object {}}
                                  />
                                }
                                name="fieldType"
                                onChange={[Function]}
                                value="string"
                              >
                                <TextFieldComponent
                                  customInputStyles={Object {}}
                                  customLabelStyles={Object {}}
                                  disabled={true}
                                  error={false}
                                  fullWidth={true}
                                  iconComponent={null}
                                  label={
                                    <FormattedMessage
                                      defaultMessage="Field Type"
                                      id="shared.components.filter.fieldType"
                                      values={Object {}}
                                    />
                                  }
                                  name="fieldType"
                                  onChange={[Function]}
                                  type="text"
                                  value="string"
                                >
                                  <div
                                    style={
                                      Object {
                                        "display": "flex",
                                        "flexDirection": "column",
                                        "maxWidth": "100%",
                                        "paddingBottom": "30px",
                                        "position": "relative",
                                      }
                                    }
                                  >
                                    <Component
                                      customStyles={Object {}}
                                      name="fieldType"
                                    >
                                      <LabelComponent
                                        customStyles={Object {}}
                                        name="fieldType"
                                      >
                                        <label
                                          htmlFor="fieldType"
                                          style={
                                            Object {
                                              "border": "none",
                                              "borderTop": "1px solid #2F2F36",
                                              "color": "#71737e",
                                              "display": "block",
                                              "fontSize": "14px",
                                              "outline": "none",
                                              "paddingTop": "8px",
                                              "width": "100%",
                                            }
                                          }
                                        >
                                          <FormattedMessage
                                            defaultMessage="Field Type"
                                            id="shared.components.filter.fieldType"
                                            values={Object {}}
                                          >
                                            <span>
                                              Field Type
                                            </span>
                                          </FormattedMessage>
                                        </label>
                                      </LabelComponent>
                                    </Component>
                                    <Component
                                      customStyles={Object {}}
                                      disabled={true}
                                      name="fieldType"
                                      onChange={[Function]}
                                      type="text"
                                      value="string"
                                    >
                                      <InputComponent
                                        customStyles={Object {}}
                                        disabled={true}
                                        name="fieldType"
                                        onChange={[Function]}
                                        type="text"
                                        value="string"
                                      >
                                        <input
                                          disabled={true}
                                          id="fieldType"
                                          name="fieldType"
                                          onChange={[Function]}
                                          style={
                                            Object {
                                              "backgroundColor": "transparent",
                                              "border": "none",
                                              "color": "#FFF",
                                              "fontSize": "18px",
                                              "lineHeight": "24px",
                                              "outline": "none",
                                            }
                                          }
                                          type="text"
                                          value="string"
                                        />
                                      </InputComponent>
                                    </Component>
                                    <div
                                      style={
                                        Object {
                                          "position": "absolute",
                                          "right": 0,
                                          "top": 0,
                                        }
                                      }
                                    />
                                  </div>
                                </TextFieldComponent>
                              </Component>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TextInput>
                      <TextInput
                        checkOnlyErrors={false}
                        disabled={true}
                        errors={Object {}}
                        fullWidth={true}
                        handleBlur={[Function]}
                        handleReset={[Function]}
                        handleSubmit={[Function]}
                        initialValues={
                          Object {
                            "field": "field",
                            "fieldType": "string",
                            "filterType": "filterType",
                            "name": "name",
                            "unique": "1",
                          }
                        }
                        isEdit={false}
                        isSubmitting={false}
                        isValidating={false}
                        label={
                          <FormattedMessage
                            defaultMessage="Unique items"
                            id="shared.components.filter.unique"
                            values={Object {}}
                          />
                        }
                        name="unique"
                        onChange={[Function]}
                        registerField={[Function]}
                        resetForm={[Function]}
                        setError={[Function]}
                        setErrors={[Function]}
                        setFieldError={[Function]}
                        setFieldTouched={[Function]}
                        setFormikState={[Function]}
                        setStatus={[Function]}
                        setSubmitting={[Function]}
                        setTouched={[Function]}
                        setValues={[Function]}
                        submitCount={0}
                        submitForm={[Function]}
                        touched={Object {}}
                        unregisterField={[Function]}
                        validateField={[Function]}
                        validateForm={[Function]}
                        validateOnBlur={true}
                        validateOnChange={true}
                        value="1"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "bDWFJH",
                                  "rules": Array [],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-bdVaJa bDWFJH"
                            >
                              <Component
                                disabled={true}
                                error={false}
                                fullWidth={true}
                                iconComponent={null}
                                label={
                                  <FormattedMessage
                                    defaultMessage="Unique items"
                                    id="shared.components.filter.unique"
                                    values={Object {}}
                                  />
                                }
                                name="unique"
                                onChange={[Function]}
                                value="1"
                              >
                                <TextFieldComponent
                                  customInputStyles={Object {}}
                                  customLabelStyles={Object {}}
                                  disabled={true}
                                  error={false}
                                  fullWidth={true}
                                  iconComponent={null}
                                  label={
                                    <FormattedMessage
                                      defaultMessage="Unique items"
                                      id="shared.components.filter.unique"
                                      values={Object {}}
                                    />
                                  }
                                  name="unique"
                                  onChange={[Function]}
                                  type="text"
                                  value="1"
                                >
                                  <div
                                    style={
                                      Object {
                                        "display": "flex",
                                        "flexDirection": "column",
                                        "maxWidth": "100%",
                                        "paddingBottom": "30px",
                                        "position": "relative",
                                      }
                                    }
                                  >
                                    <Component
                                      customStyles={Object {}}
                                      name="unique"
                                    >
                                      <LabelComponent
                                        customStyles={Object {}}
                                        name="unique"
                                      >
                                        <label
                                          htmlFor="unique"
                                          style={
                                            Object {
                                              "border": "none",
                                              "borderTop": "1px solid #2F2F36",
                                              "color": "#71737e",
                                              "display": "block",
                                              "fontSize": "14px",
                                              "outline": "none",
                                              "paddingTop": "8px",
                                              "width": "100%",
                                            }
                                          }
                                        >
                                          <FormattedMessage
                                            defaultMessage="Unique items"
                                            id="shared.components.filter.unique"
                                            values={Object {}}
                                          >
                                            <span>
                                              Unique items
                                            </span>
                                          </FormattedMessage>
                                        </label>
                                      </LabelComponent>
                                    </Component>
                                    <Component
                                      customStyles={Object {}}
                                      disabled={true}
                                      name="unique"
                                      onChange={[Function]}
                                      type="text"
                                      value="1"
                                    >
                                      <InputComponent
                                        customStyles={Object {}}
                                        disabled={true}
                                        name="unique"
                                        onChange={[Function]}
                                        type="text"
                                        value="1"
                                      >
                                        <input
                                          disabled={true}
                                          id="unique"
                                          name="unique"
                                          onChange={[Function]}
                                          style={
                                            Object {
                                              "backgroundColor": "transparent",
                                              "border": "none",
                                              "color": "#FFF",
                                              "fontSize": "18px",
                                              "lineHeight": "24px",
                                              "outline": "none",
                                            }
                                          }
                                          type="text"
                                          value="1"
                                        />
                                      </InputComponent>
                                    </Component>
                                    <div
                                      style={
                                        Object {
                                          "position": "absolute",
                                          "right": 0,
                                          "top": 0,
                                        }
                                      }
                                    />
                                  </div>
                                </TextFieldComponent>
                              </Component>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TextInput>
                    </div>
                  </StyledComponent>
                </styled.div>
                <NavigationContainer
                  right={false}
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-gzVnrw",
                            "isStatic": true,
                            "lastClassName": "bvWFXB",
                            "rules": Array [
                              "
  height: 155px;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-gzVnrw",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-gzVnrw bvWFXB"
                      >
                        <styled.div
                          right={false}
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-htoDjs",
                                  "isStatic": false,
                                  "lastClassName": "eZUylk",
                                  "rules": Array [
                                    "
  position: fixed;
  padding: 40px 0 36px;
  bottom: 0;
  width: calc(100% - 40px);
  background-image: linear-gradient(
    to top,
    ",
                                    [Function],
                                    ",
    rgba(0, 0, 0, 0)
  );
  display: flex;
  justify-content: ",
                                    [Function],
                                    ";
  flex-wrap: wrap;
  align-items: center;

  ",
                                    "
    @media (min-width: ",
                                    "1040",
                                    "px) {
      ",
                                    "
    width: ",
                                    "1000",
                                    "px;
  ",
                                    "
    }
  ",
                                    "
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-htoDjs",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            right={false}
                          >
                            <div
                              className="sc-htoDjs eZUylk"
                            >
                              <BackButton
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                              >
                                <Component
                                  customStyles={
                                    Object {
                                      "marginRight": 5,
                                      "width": "calc(50% - 5px)",
                                    }
                                  }
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <ButtonComponent
                                    customStyles={
                                      Object {
                                        "marginRight": 5,
                                        "width": "calc(50% - 5px)",
                                      }
                                    }
                                    disabled={false}
                                    inverse={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      disabled={false}
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "backgroundColor": "#1d1d20",
                                          "border": "none",
                                          "borderRadius": "48px",
                                          "color": "#FFF",
                                          "cursor": "pointer",
                                          "display": "inline-block",
                                          "fill": "#FFF",
                                          "fontSize": "18px",
                                          "margin": "0",
                                          "marginRight": 5,
                                          "minHeight": "48px",
                                          "outline": "none",
                                          "padding": "0",
                                          "width": "calc(50% - 5px)",
                                        }
                                      }
                                      type="button"
                                    >
                                      <FormattedMessage
                                        defaultMessage="Delete"
                                        id="shared.components.filter.deleteFilter"
                                        values={Object {}}
                                      >
                                        <span>
                                          Delete
                                        </span>
                                      </FormattedMessage>
                                    </button>
                                  </ButtonComponent>
                                </Component>
                              </BackButton>
                              <NextButton
                                disabled={true}
                                loading={false}
                                type="submit"
                              >
                                <Component
                                  customStyles={
                                    Object {
                                      "marginLeft": 5,
                                      "width": "calc(50% - 5px)",
                                    }
                                  }
                                  disabled={true}
                                  inverse={true}
                                  type="submit"
                                >
                                  <ButtonComponent
                                    customStyles={
                                      Object {
                                        "marginLeft": 5,
                                        "width": "calc(50% - 5px)",
                                      }
                                    }
                                    disabled={true}
                                    inverse={true}
                                    type="submit"
                                  >
                                    <button
                                      disabled={true}
                                      style={
                                        Object {
                                          "backgroundColor": "#1d1d20",
                                          "border": "none",
                                          "borderRadius": "48px",
                                          "color": "#71737e",
                                          "cursor": "default",
                                          "display": "inline-block",
                                          "fill": "#FFF",
                                          "fontSize": "18px",
                                          "margin": "0",
                                          "marginLeft": 5,
                                          "minHeight": "48px",
                                          "outline": "none",
                                          "padding": "0",
                                          "width": "calc(50% - 5px)",
                                        }
                                      }
                                      type="submit"
                                    >
                                      <FormattedMessage
                                        defaultMessage="Save"
                                        id="shared.components.filter.saveFilter"
                                        values={Object {}}
                                      >
                                        <span>
                                          Save
                                        </span>
                                      </FormattedMessage>
                                    </button>
                                  </ButtonComponent>
                                </Component>
                              </NextButton>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </NavigationContainer>
              </form>
            </Component>
          </Form>
        </StyledComponent>
      </Styled(Form)>
    </Formik>
    <Modal
      ariaHideApp={true}
      bodyOpenClassName="ReactModal__Body--open"
      closeTimeoutMS={0}
      contentLabel="Confirm Removal"
      isOpen={false}
      parentSelector={[Function]}
      portalClassName="ReactModalPortal"
      role="dialog"
      shouldCloseOnEsc={true}
      shouldCloseOnOverlayClick={true}
      shouldFocusAfterRender={true}
      shouldReturnFocusAfterClose={true}
      style={
        Object {
          "content": Object {
            "WebkitOverflowScrolling": "touch",
            "alignItems": "center",
            "backgroundColor": "rgba(0, 0, 0, 0.9)",
            "border": "1px solid #ccc",
            "borderRadius": "4px",
            "bottom": "40px",
            "color": "FFFFFF",
            "display": "flex",
            "left": "40px",
            "outline": "none",
            "overflow": "auto",
            "padding": "20px",
            "position": "absolute",
            "right": "40px",
            "top": "40px",
          },
          "overlay": Object {
            "backgroundColor": "rgba(0, 0, 0, 0.5)",
            "bottom": 0,
            "left": 0,
            "position": "fixed",
            "right": 0,
            "top": 0,
            "zIndex": 10000,
          },
        }
      }
    >
      <Portal
        containerInfo={
          <div
            class="ReactModalPortal"
          />
        }
      >
        <ModalPortal
          ariaHideApp={true}
          bodyOpenClassName="ReactModal__Body--open"
          closeTimeoutMS={0}
          contentLabel="Confirm Removal"
          defaultStyles={
            Object {
              "content": Object {
                "WebkitOverflowScrolling": "touch",
                "background": "#fff",
                "border": "1px solid #ccc",
                "borderRadius": "4px",
                "bottom": "40px",
                "left": "40px",
                "outline": "none",
                "overflow": "auto",
                "padding": "20px",
                "position": "absolute",
                "right": "40px",
                "top": "40px",
              },
              "overlay": Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
              },
            }
          }
          isOpen={false}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          role="dialog"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "content": Object {
                "WebkitOverflowScrolling": "touch",
                "alignItems": "center",
                "backgroundColor": "rgba(0, 0, 0, 0.9)",
                "border": "1px solid #ccc",
                "borderRadius": "4px",
                "bottom": "40px",
                "color": "FFFFFF",
                "display": "flex",
                "left": "40px",
                "outline": "none",
                "overflow": "auto",
                "padding": "20px",
                "position": "absolute",
                "right": "40px",
                "top": "40px",
              },
              "overlay": Object {
                "backgroundColor": "rgba(0, 0, 0, 0.5)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
                "zIndex": 10000,
              },
            }
          }
        />
      </Portal>
    </Modal>
  </FilterForm>
</IntlProvider>
`;
