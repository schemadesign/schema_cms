// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FilterForm: Component should render correctly 1`] = `
<Fragment>
  <Formik
    initialValues={
      Object {
        "field": "field",
        "fieldType": "string",
        "filterType": "checkbox",
        "name": "",
        "unique": "1",
      }
    }
    onSubmit={[Function]}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "name",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "name": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "min": true,
              "required": true,
              "trim": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Component />
  </Formik>
  <Styled(Modal)
    contentLabel="Confirm Removal"
    isOpen={false}
    style={
      Object {
        "content": Object {
          "WebkitOverflowScrolling": "touch",
          "alignItems": "center",
          "border": null,
          "borderRadius": "4px",
          "boxShadow": "0 4px 8px 0 rgba(0, 0, 0, 0.5)",
          "display": "flex",
          "flexDirection": "column",
          "left": "50%",
          "maxWidth": "600px",
          "outline": "none",
          "overflow": "auto",
          "position": "absolute",
          "right": "10px",
          "top": "50%",
          "transform": "translate(-50%, -50%)",
          "width": "calc(100% - 20px)",
        },
        "overlay": Object {
          "backgroundColor": "rgba(29, 29, 32, 0.75)",
          "bottom": 0,
          "left": 0,
          "position": "fixed",
          "right": 0,
          "top": 0,
          "zIndex": 10000,
        },
      }
    }
  >
    <Styled(H1)>
      <FormattedMessage
        defaultMessage="Are you sure you want to remove the filter?"
        id="shared.components.filterForm.removeTitle"
        values={Object {}}
      />
    </Styled(H1)>
    <styled.div>
      <BackButton
        disabled={false}
        onClick={[Function]}
      >
        <FormattedMessage
          defaultMessage="Cancel"
          id="shared.components.filterForm.cancelRemoval"
          values={Object {}}
        />
      </BackButton>
      <NextButton
        disabled={false}
        id="confirmRemovalBtn"
        loading={false}
        onClick={[Function]}
      >
        <FormattedMessage
          defaultMessage="Confirm"
          id="shared.components.filterForm.confirmRemoval"
          values={Object {}}
        />
      </NextButton>
    </styled.div>
  </Styled(Modal)>
</Fragment>
`;

exports[`FilterForm: Component should render create form 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "field": "field",
        "fieldType": "string",
        "filterType": "checkbox",
        "name": "",
        "unique": "1",
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "field": "field",
        "fieldType": "string",
        "filterType": "checkbox",
        "name": "",
        "unique": "1",
      },
    }
  }
>
  <Styled(Form)>
    <TextInput
      autoWidth={false}
      checkOnlyErrors={false}
      errors={Object {}}
      fullWidth={true}
      getFieldHelpers={[Function]}
      getFieldMeta={[Function]}
      getFieldProps={[Function]}
      handleBlur={[Function]}
      handleReset={[Function]}
      handleSubmit={[Function]}
      initialErrors={Object {}}
      initialTouched={Object {}}
      initialValues={
        Object {
          "field": "field",
          "fieldType": "string",
          "filterType": "checkbox",
          "name": "",
          "unique": "1",
        }
      }
      isEdit={true}
      isValidating={false}
      label={
        <FormattedMessage
          defaultMessage="Filter Name"
          id="shared.components.filterForm.name"
          values={Object {}}
        />
      }
      name="name"
      onChange={[Function]}
      registerField={[Function]}
      resetForm={[Function]}
      setErrors={[Function]}
      setFieldError={[Function]}
      setFieldTouched={[Function]}
      setFormikState={[Function]}
      setStatus={[Function]}
      setSubmitting={[Function]}
      setTouched={[Function]}
      setValues={[Function]}
      submitCount={0}
      submitForm={[Function]}
      touched={Object {}}
      unregisterField={[Function]}
      validateField={[Function]}
      validateForm={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
      validateOnMount={false}
      value=""
    />
    <Select
      customLabelStyles={Object {}}
      customStyles={null}
      label={
        <FormattedMessage
          defaultMessage="Field"
          id="shared.components.filterForm.field"
          values={Object {}}
        />
      }
      name="field"
      onSelect={[Function]}
      options={
        Array [
          Object {
            "label": "field",
            "value": "field",
          },
        ]
      }
      value="field"
    />
    <Select
      customLabelStyles={Object {}}
      customStyles={null}
      label={
        <FormattedMessage
          defaultMessage="Filter Type"
          id="shared.components.filterForm.filterType"
          values={Object {}}
        />
      }
      name="filterType"
      onSelect={[Function]}
      options={
        Array [
          Object {
            "label": "checkbox",
            "value": "checkbox",
          },
        ]
      }
      value="checkbox"
    />
    <styled.div>
      <TextInput
        autoWidth={false}
        checkOnlyErrors={false}
        disabled={true}
        errors={Object {}}
        fullWidth={true}
        getFieldHelpers={[Function]}
        getFieldMeta={[Function]}
        getFieldProps={[Function]}
        handleBlur={[Function]}
        handleReset={[Function]}
        handleSubmit={[Function]}
        initialErrors={Object {}}
        initialTouched={Object {}}
        initialValues={
          Object {
            "field": "field",
            "fieldType": "string",
            "filterType": "checkbox",
            "name": "",
            "unique": "1",
          }
        }
        isEdit={false}
        isValidating={false}
        label={
          <FormattedMessage
            defaultMessage="Field Type"
            id="shared.components.filterForm.fieldType"
            values={Object {}}
          />
        }
        name="fieldType"
        onChange={[Function]}
        registerField={[Function]}
        resetForm={[Function]}
        setErrors={[Function]}
        setFieldError={[Function]}
        setFieldTouched={[Function]}
        setFormikState={[Function]}
        setStatus={[Function]}
        setSubmitting={[Function]}
        setTouched={[Function]}
        setValues={[Function]}
        submitCount={0}
        submitForm={[Function]}
        touched={Object {}}
        unregisterField={[Function]}
        validateField={[Function]}
        validateForm={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
        validateOnMount={false}
        value="string"
      />
      <TextInput
        autoWidth={false}
        checkOnlyErrors={false}
        disabled={true}
        errors={Object {}}
        fullWidth={true}
        getFieldHelpers={[Function]}
        getFieldMeta={[Function]}
        getFieldProps={[Function]}
        handleBlur={[Function]}
        handleReset={[Function]}
        handleSubmit={[Function]}
        initialErrors={Object {}}
        initialTouched={Object {}}
        initialValues={
          Object {
            "field": "field",
            "fieldType": "string",
            "filterType": "checkbox",
            "name": "",
            "unique": "1",
          }
        }
        isEdit={false}
        isValidating={false}
        label={
          <FormattedMessage
            defaultMessage="Unique items"
            id="shared.components.filterForm.unique"
            values={Object {}}
          />
        }
        name="unique"
        onChange={[Function]}
        registerField={[Function]}
        resetForm={[Function]}
        setErrors={[Function]}
        setFieldError={[Function]}
        setFieldTouched={[Function]}
        setFormikState={[Function]}
        setStatus={[Function]}
        setSubmitting={[Function]}
        setTouched={[Function]}
        setValues={[Function]}
        submitCount={0}
        submitForm={[Function]}
        touched={Object {}}
        unregisterField={[Function]}
        validateField={[Function]}
        validateForm={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
        validateOnMount={false}
        value="1"
      />
    </styled.div>
    <NavigationContainer
      contentStyles={null}
      fixed={true}
      hideOnDesktop={false}
      right={false}
    >
      <BackButton
        disabled={false}
        onClick={[Function]}
        type="button"
      >
        <FormattedMessage
          defaultMessage="Cancel"
          id="shared.components.filterForm.cancel"
          values={Object {}}
        />
      </BackButton>
      <NextButton
        disabled={true}
        loading={false}
        type="submit"
      >
        <FormattedMessage
          defaultMessage="Save"
          id="shared.components.filterForm.saveFilter"
          values={Object {}}
        />
      </NextButton>
    </NavigationContainer>
  </Styled(Form)>
</ContextProvider>
`;

exports[`FilterForm: Component should render edit form 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": false,
      "errors": Object {},
      "getFieldHelpers": [Function],
      "getFieldMeta": [Function],
      "getFieldProps": [Function],
      "handleBlur": [Function],
      "handleChange": [Function],
      "handleReset": [Function],
      "handleSubmit": [Function],
      "initialErrors": Object {},
      "initialStatus": undefined,
      "initialTouched": Object {},
      "initialValues": Object {
        "datasource": Object {
          "id": 1,
        },
        "field": "field",
        "fieldType": "string",
        "filterType": "checkbox",
        "id": 2,
        "name": "name",
        "unique": "1",
      },
      "isSubmitting": false,
      "isValid": true,
      "isValidating": false,
      "registerField": [Function],
      "resetForm": [Function],
      "setErrors": [Function],
      "setFieldError": [Function],
      "setFieldTouched": [Function],
      "setFieldValue": [Function],
      "setFormikState": [Function],
      "setStatus": [Function],
      "setSubmitting": [Function],
      "setTouched": [Function],
      "setValues": [Function],
      "status": undefined,
      "submitCount": 0,
      "submitForm": [Function],
      "touched": Object {},
      "unregisterField": [Function],
      "validateField": [Function],
      "validateForm": [Function],
      "validateOnBlur": true,
      "validateOnChange": true,
      "validateOnMount": false,
      "values": Object {
        "datasource": Object {
          "id": 1,
        },
        "field": "field",
        "fieldType": "string",
        "filterType": "checkbox",
        "id": 2,
        "name": "name",
        "unique": "1",
      },
    }
  }
>
  <Styled(Form)>
    <TextInput
      autoWidth={false}
      checkOnlyErrors={false}
      errors={Object {}}
      fullWidth={true}
      getFieldHelpers={[Function]}
      getFieldMeta={[Function]}
      getFieldProps={[Function]}
      handleBlur={[Function]}
      handleReset={[Function]}
      handleSubmit={[Function]}
      initialErrors={Object {}}
      initialTouched={Object {}}
      initialValues={
        Object {
          "datasource": Object {
            "id": 1,
          },
          "field": "field",
          "fieldType": "string",
          "filterType": "checkbox",
          "id": 2,
          "name": "name",
          "unique": "1",
        }
      }
      isEdit={true}
      isValidating={false}
      label={
        <FormattedMessage
          defaultMessage="Filter Name"
          id="shared.components.filterForm.name"
          values={Object {}}
        />
      }
      name="name"
      onChange={[Function]}
      registerField={[Function]}
      resetForm={[Function]}
      setErrors={[Function]}
      setFieldError={[Function]}
      setFieldTouched={[Function]}
      setFormikState={[Function]}
      setStatus={[Function]}
      setSubmitting={[Function]}
      setTouched={[Function]}
      setValues={[Function]}
      submitCount={0}
      submitForm={[Function]}
      touched={Object {}}
      unregisterField={[Function]}
      validateField={[Function]}
      validateForm={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
      validateOnMount={false}
      value="name"
    />
    <Select
      customLabelStyles={Object {}}
      customStyles={null}
      label={
        <FormattedMessage
          defaultMessage="Field"
          id="shared.components.filterForm.field"
          values={Object {}}
        />
      }
      name="field"
      onSelect={[Function]}
      options={
        Array [
          Object {
            "label": "field",
            "value": "field",
          },
        ]
      }
      value="field"
    />
    <Select
      customLabelStyles={Object {}}
      customStyles={null}
      label={
        <FormattedMessage
          defaultMessage="Filter Type"
          id="shared.components.filterForm.filterType"
          values={Object {}}
        />
      }
      name="filterType"
      onSelect={[Function]}
      options={
        Array [
          Object {
            "label": "checkbox",
            "value": "checkbox",
          },
        ]
      }
      value="checkbox"
    />
    <styled.div>
      <TextInput
        autoWidth={false}
        checkOnlyErrors={false}
        disabled={true}
        errors={Object {}}
        fullWidth={true}
        getFieldHelpers={[Function]}
        getFieldMeta={[Function]}
        getFieldProps={[Function]}
        handleBlur={[Function]}
        handleReset={[Function]}
        handleSubmit={[Function]}
        initialErrors={Object {}}
        initialTouched={Object {}}
        initialValues={
          Object {
            "datasource": Object {
              "id": 1,
            },
            "field": "field",
            "fieldType": "string",
            "filterType": "checkbox",
            "id": 2,
            "name": "name",
            "unique": "1",
          }
        }
        isEdit={false}
        isValidating={false}
        label={
          <FormattedMessage
            defaultMessage="Field Type"
            id="shared.components.filterForm.fieldType"
            values={Object {}}
          />
        }
        name="fieldType"
        onChange={[Function]}
        registerField={[Function]}
        resetForm={[Function]}
        setErrors={[Function]}
        setFieldError={[Function]}
        setFieldTouched={[Function]}
        setFormikState={[Function]}
        setStatus={[Function]}
        setSubmitting={[Function]}
        setTouched={[Function]}
        setValues={[Function]}
        submitCount={0}
        submitForm={[Function]}
        touched={Object {}}
        unregisterField={[Function]}
        validateField={[Function]}
        validateForm={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
        validateOnMount={false}
        value="string"
      />
      <TextInput
        autoWidth={false}
        checkOnlyErrors={false}
        disabled={true}
        errors={Object {}}
        fullWidth={true}
        getFieldHelpers={[Function]}
        getFieldMeta={[Function]}
        getFieldProps={[Function]}
        handleBlur={[Function]}
        handleReset={[Function]}
        handleSubmit={[Function]}
        initialErrors={Object {}}
        initialTouched={Object {}}
        initialValues={
          Object {
            "datasource": Object {
              "id": 1,
            },
            "field": "field",
            "fieldType": "string",
            "filterType": "checkbox",
            "id": 2,
            "name": "name",
            "unique": "1",
          }
        }
        isEdit={false}
        isValidating={false}
        label={
          <FormattedMessage
            defaultMessage="Unique items"
            id="shared.components.filterForm.unique"
            values={Object {}}
          />
        }
        name="unique"
        onChange={[Function]}
        registerField={[Function]}
        resetForm={[Function]}
        setErrors={[Function]}
        setFieldError={[Function]}
        setFieldTouched={[Function]}
        setFormikState={[Function]}
        setStatus={[Function]}
        setSubmitting={[Function]}
        setTouched={[Function]}
        setValues={[Function]}
        submitCount={0}
        submitForm={[Function]}
        touched={Object {}}
        unregisterField={[Function]}
        validateField={[Function]}
        validateForm={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
        validateOnMount={false}
        value="1"
      />
    </styled.div>
    <styled.div>
      <Styled(Span)
        onClick={[Function]}
      >
        <FormattedMessage
          defaultMessage="Remove filter"
          id="shared.components.filterForm.deleteFilter"
          values={Object {}}
        />
      </Styled(Span)>
    </styled.div>
    <NavigationContainer
      contentStyles={null}
      fixed={true}
      hideOnDesktop={false}
      right={false}
    >
      <BackButton
        disabled={false}
        onClick={[Function]}
        type="button"
      >
        <FormattedMessage
          defaultMessage="Back"
          id="shared.components.filterForm.back"
          values={Object {}}
        />
      </BackButton>
      <NextButton
        disabled={true}
        loading={false}
        type="submit"
      >
        <FormattedMessage
          defaultMessage="Save"
          id="shared.components.filterForm.saveFilter"
          values={Object {}}
        />
      </NextButton>
    </NavigationContainer>
  </Styled(Form)>
</ContextProvider>
`;
