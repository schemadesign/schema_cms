# Generated by Django 2.2.10 on 2020-07-30 07:01

from model_clone import create_copy_of_instance
from django.db import transaction
from django.db import migrations


def copy_simple_element(element, block, elements_set=None):
    attrs = {"block_id": block.id}

    if elements_set:
        attrs["custom_element_set_id"] = elements_set.id

    return create_copy_of_instance(element, attrs=attrs)


def copy_observable_element(element, block, elements_set=None):
    new_obs = create_copy_of_instance(element.observable_hq)

    attrs = {"block_id": block.id, "observable_hq_id": new_obs.id}

    if elements_set:
        attrs["custom_element_set_id"] = elements_set.id

    return create_copy_of_instance(element, attrs=attrs)


def clone_custom_element(element, block):
    new_ele = create_copy_of_instance(element, attrs={"block_id": block.id})

    for element_set in element.elements_sets.all():
        new_set = create_copy_of_instance(element_set, attrs={"custom_element_id": new_ele.id})

        for set_element in element_set.elements.all():
            if set_element.type == "observable_hq":
                copy_observable_element(set_element, block, new_set)
            else:
                copy_simple_element(set_element, block, elements_set=new_set)

    return new_ele


def copy_elements(element, block):
    if element.custom_element_set:
        return None

    if element.type == "observable_hq":
        return copy_observable_element(element, block)

    elif element.type == "custom_element":
        return clone_custom_element(element, block)
    else:
        return copy_simple_element(element, block)


def copy_tags(tags, page_id):
    for tag in tags:
        create_copy_of_instance(tag, attrs={"page_id": page_id})


def copy_page(obj, attrs):
    new_page = create_copy_of_instance(obj, attrs=attrs)

    for block in obj.page_blocks.all():
        copied_block = create_copy_of_instance(block, attrs={"page_id": new_page.id})

        for element in block.elements.all():
            copy_elements(element, copied_block)

    return new_page


def create_published_pages(apps, schema_editor):
    Page = apps.get_model("pages", "Page")
    db_alias = schema_editor.connection.alias

    with transaction.atomic():
        for page in Page.objects.using(db_alias).filter(is_draft=True):
            published_instance = copy_page(page, attrs={"is_draft": False, "state": "published"})
            copy_tags(page.tags.all(), published_instance.id)
            page.published_version = published_instance
            page.save()


def reverse(apps, schema_editor):
    Page = apps.get_model("pages", "Page")
    BlockElement = apps.get_model("pages", "PageBlockElement")
    db_alias = schema_editor.connection.alias

    pages = Page.objects.using(db_alias).filter(is_draft=False)

    for page in pages:
        for block in page.page_blocks.all():
            BlockElement.objects.filter(block_id=block.id).delete()
            block.delete()

        page.tags.all().delete()
        page.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("pages", "0049_auto_20200730_0701"),
    ]

    operations = [
        migrations.RunPython(create_published_pages, reverse),
    ]
